[{"/home/kagorora/Documents/dms/dms-f/src/index.js":"1","/home/kagorora/Documents/dms/dms-f/src/store/reducers/orderReducers.js":"2","/home/kagorora/Documents/dms/dms-f/src/store/reducers/productReducers.js":"3","/home/kagorora/Documents/dms/dms-f/src/components/cart/Cart.js":"4","/home/kagorora/Documents/dms/dms-f/src/components/paymentMethod/PaymentMethod.js":"5","/home/kagorora/Documents/dms/dms-f/src/components/register/Register.js":"6","/home/kagorora/Documents/dms/dms-f/src/components/admin/Products.js":"7","/home/kagorora/Documents/dms/dms-f/src/components/order/Order.js":"8","/home/kagorora/Documents/dms/dms-f/src/components/buyer/Buyer.js":"9","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Header/Header.js":"10","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Loader.js":"11","/home/kagorora/Documents/dms/dms-f/src/components/reusable/FormContainer.js":"12","/home/kagorora/Documents/dms/dms-f/src/store/actions/orderActions.js":"13","/home/kagorora/Documents/dms/dms-f/src/components/reusable/SearchBox/SearchBox.js":"14","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Product/Product.js":"15","/home/kagorora/Documents/dms/dms-f/src/store/reducers/cartReducers.js":"16","/home/kagorora/Documents/dms/dms-f/src/components/profile/Profile.js":"17","/home/kagorora/Documents/dms/dms-f/src/components/myOrders/MyOrders.js":"18","/home/kagorora/Documents/dms/dms-f/src/components/admin/EditUser.js":"19","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Footer/Footer.js":"20","/home/kagorora/Documents/dms/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js":"21","/home/kagorora/Documents/dms/dms-f/src/store/actions/cartsActions.js":"22","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Rating/Rating.js":"23","/home/kagorora/Documents/dms/dms-f/src/App.js":"24","/home/kagorora/Documents/dms/dms-f/src/components/login/Login.js":"25","/home/kagorora/Documents/dms/dms-f/src/components/admin/Orders.js":"26","/home/kagorora/Documents/dms/dms-f/src/components/placeOrder/PlaceOrder.js":"27","/home/kagorora/Documents/dms/dms-f/src/components/productDetails/ProductDetails.js":"28","/home/kagorora/Documents/dms/dms-f/src/components/shipping/Shipping.js":"29","/home/kagorora/Documents/dms/dms-f/src/store.js":"30","/home/kagorora/Documents/dms/dms-f/src/components/admin/Users.js":"31","/home/kagorora/Documents/dms/dms-f/src/store/types/types.js":"32","/home/kagorora/Documents/dms/dms-f/src/store/actions/usersActions.js":"33","/home/kagorora/Documents/dms/dms-f/src/components/admin/EditProduct.js":"34","/home/kagorora/Documents/dms/dms-f/src/store/actions/productsActions.js":"35"},{"size":319,"mtime":1614856385072,"results":"36","hashOfConfig":"37"},{"size":3644,"mtime":1614856385080,"results":"38","hashOfConfig":"37"},{"size":3173,"mtime":1614856385080,"results":"39","hashOfConfig":"37"},{"size":3597,"mtime":1614856385044,"results":"40","hashOfConfig":"37"},{"size":1792,"mtime":1614856385048,"results":"41","hashOfConfig":"37"},{"size":4653,"mtime":1614856385060,"results":"42","hashOfConfig":"37"},{"size":4237,"mtime":1614856385044,"results":"43","hashOfConfig":"37"},{"size":8154,"mtime":1614856385044,"results":"44","hashOfConfig":"37"},{"size":1068,"mtime":1614856385044,"results":"45","hashOfConfig":"37"},{"size":3356,"mtime":1614856385072,"results":"46","hashOfConfig":"37"},{"size":379,"mtime":1614856385072,"results":"47","hashOfConfig":"37"},{"size":336,"mtime":1614856385072,"results":"48","hashOfConfig":"37"},{"size":4729,"mtime":1614856385072,"results":"49","hashOfConfig":"37"},{"size":776,"mtime":1614856385072,"results":"50","hashOfConfig":"37"},{"size":917,"mtime":1614856385072,"results":"51","hashOfConfig":"37"},{"size":1303,"mtime":1614856385080,"results":"52","hashOfConfig":"37"},{"size":4959,"mtime":1614856385060,"results":"53","hashOfConfig":"37"},{"size":3059,"mtime":1614856385044,"results":"54","hashOfConfig":"37"},{"size":4408,"mtime":1614856385044,"results":"55","hashOfConfig":"37"},{"size":310,"mtime":1614856385072,"results":"56","hashOfConfig":"37"},{"size":1263,"mtime":1614856385072,"results":"57","hashOfConfig":"37"},{"size":1238,"mtime":1614856385072,"results":"58","hashOfConfig":"37"},{"size":1541,"mtime":1614856385072,"results":"59","hashOfConfig":"37"},{"size":2389,"mtime":1614856385040,"results":"60","hashOfConfig":"37"},{"size":2235,"mtime":1614856385044,"results":"61","hashOfConfig":"37"},{"size":3152,"mtime":1614856385044,"results":"62","hashOfConfig":"37"},{"size":5147,"mtime":1614856385060,"results":"63","hashOfConfig":"37"},{"size":7685,"mtime":1614856385060,"results":"64","hashOfConfig":"37"},{"size":3316,"mtime":1614856385072,"results":"65","hashOfConfig":"37"},{"size":2469,"mtime":1614856385072,"results":"66","hashOfConfig":"37"},{"size":3376,"mtime":1614856385044,"results":"67","hashOfConfig":"37"},{"size":4853,"mtime":1614856385080,"results":"68","hashOfConfig":"37"},{"size":6293,"mtime":1614856385072,"results":"69","hashOfConfig":"37"},{"size":5931,"mtime":1614856385044,"results":"70","hashOfConfig":"37"},{"size":4333,"mtime":1614856385072,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1lu3gt3",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kagorora/Documents/dms/dms-f/src/index.js",[],["155","156"],"/home/kagorora/Documents/dms/dms-f/src/store/reducers/orderReducers.js",[],["157","158"],"/home/kagorora/Documents/dms/dms-f/src/store/reducers/productReducers.js",[],["159","160"],"/home/kagorora/Documents/dms/dms-f/src/components/cart/Cart.js",["161"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Row,\n  Col,\n  Image,\n  Form,\n  ListGroup,\n  Button,\n  Card,\n} from \"react-bootstrap\";\nimport { addToCart, removeFromCart } from \"../../store/actions/cartsActions\";\nimport Message from \"../reusable/Message.js\";\nimport { Link } from \"react-router-dom\";\n\nconst Cart = ({ match, location, history }) => {\n  const productId = match.params.id;\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n\n  const { cartItems } = cart;\n\n  useEffect(() => {\n    if (productId) {\n      dispatch(addToCart(productId, qty));\n    }\n  }, [dispatch, productId, qty]);\n\n  const checkoutHandler = () => {\n    history.push(`/login?redirect=shipping`);\n  };\n\n  const removeItemHandler = (id) => {\n    dispatch(removeFromCart(id));\n  };\n\n  return (\n    <Row>\n      <Col md={8}>\n        <h1>Shopping Cart</h1>\n        {cartItems.length === 0 ? (\n          <Message>Shopping Cart Empty</Message>\n        ) : (\n          <ListGroup variant='flush'>\n            {cartItems.map((item) => (\n              <ListGroup.Item key={item.product}>\n                <Row>\n                  <Col md={2}>\n                    <Image\n                      src={item.image}\n                      alt={item.name}\n                      fluid\n                      rounded\n                    ></Image>\n                  </Col>\n                  <Col md={3}>\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                  </Col>\n                  <Col md={2}>FRW {item.price}</Col>\n                  <Col md={3}>\n                    <Form.Control\n                      as='select'\n                      value={item.qty}\n                      onChange={(e) =>\n                        dispatch(\n                          addToCart(item.product, Number(e.target.value))\n                        )\n                      }\n                    >\n                      {[...Array(item.countInStock).keys()].map((index) => (\n                        <option key={index + 1} value={index + 1}>\n                          {index + 1}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Col>\n                  <Col md={2}>\n                    <Button\n                      variant='light'\n                      onClick={() => removeItemHandler(item.product)}\n                    >\n                      <i className='fas fa-trash fa-fw'></i>\n                    </Button>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </Col>\n      <Col md={4}>\n        <Card>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>\n                Total Items:{\" \"}\n                {cartItems.reduce((acc, item) => acc + item.qty, 0)}\n              </h2>\n              $\n              {cartItems\n                .reduce((acc, item) => acc + item.qty * item.price, 0)\n                .toFixed(2)}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Button\n                type='button'\n                className='btn-block rounded'\n                onClick={checkoutHandler}\n                disabled={cartItems.length == 0}\n              >\n                Proceed to Checkout\n              </Button>\n            </ListGroup.Item>\n          </ListGroup>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Cart;\n","/home/kagorora/Documents/dms/dms-f/src/components/paymentMethod/PaymentMethod.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/register/Register.js",["162","163"],"import React, { useEffect, useState } from 'react';\nimport { FormGroup, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport FormContainer from '../reusable/FormContainer.js';\nimport { register } from '../../store/actions/usersActions.js'\nimport Message from '../reusable/Message.js';\nimport Loader from '../reusable/Loader.js';\n\nconst Register = ({ history, location }) => {\n\n    const dispatch = new useDispatch();\n\n    const [name, setName] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [email, setEmail] = useState('');\n    const [nationalId, setNationalId] = useState('');\n    const [address, setAddress] = useState('');\n    const [userType, setUserType] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n\n    const userRegister = useSelector(state => state.userRegister)\n\n    const { userInfo, loading, error } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect);\n        }\n    }, [history, userInfo, redirect]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            setMessage('passwords are not matching!, try again');\n        }\n        dispatch(register(name, phoneNumber, nationalId, email, userType, password))\n    }\n\n    return (\n        <FormContainer >\n            <h1>SIGN UP</h1>\n            { loading && <Loader />}\n            {error && <Message variant='danger'>{error}</Message>}\n            {message && <Message variant='danger'>{message}</Message>}\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control onChange={(e) => setName(e.target.value)} value={name} placeholder='enter name'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>Phone Number</Form.Label>\n                    <Form.Control onChange={(e) => setPhoneNumber(e.target.value)} value={phoneNumber} placeholder='enter Phone Number'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>nationalId</Form.Label>\n                    <Form.Control onChange={(e) => setNationalId(e.target.value)} value={nationalId} placeholder='enter NationalId'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label >email</Form.Label>\n                    <Form.Control type='email' onChange={(e) => setEmail(e.target.value)} value={email} placeholder='enter email'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>user Type</Form.Label>\n                    <Form.Control\n                        as='select'\n                        value={userType}\n                        onChange={(e) =>\n                            setUserType(e.target.value)\n                        }\n                    >\n                         <option selected value=\"\">Select User Type</option>\n                        <option>\n                            buyer\n                        </option>\n                        <option>\n                            seller\n                        </option>\n                    </Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>password</Form.Label>\n                    <Form.Control type='password' onChange={(e) => setPassword(e.target.value)} value={password} placeholder='enter password'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label >comfirm password</Form.Label>\n                    <Form.Control type='password' onChange={(e) => setConfirmPassword(e.target.value)} value={confirmPassword} placeholder='confirm password'></Form.Control>\n                </FormGroup>\n                <Button type='submit' variant='primary' className='btn-block rounded'>SIGN UP</Button>\n            </Form>\n            <div className=\"my-3\">\n\n\n                <Row className='py-3'>\n                    <Col>\n                        Have an account?\n          <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                            Login\n          </Link>\n                    </Col>\n                </Row>\n\n            </div>\n        </FormContainer>\n    )\n}\n\nexport default Register\n","/home/kagorora/Documents/dms/dms-f/src/components/admin/Products.js",["164"],"import React, { useEffect } from \"react\";\nimport { Button, Row, Col, Table } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport {\n  listProducts,\n  deleteProduct,\n  createProduct,\n} from \"../../store/actions/productsActions\";\nimport { CREATE_PRODUCT_RESET } from \"../../store/types/types.js\";\n\nconst Products = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const productCreate = useSelector((state) => state.productCreate);\n  const {\n    success: successCreate,\n    loading: loadingCreate,\n    error: errorCreate,\n    product: createdProduct,\n  } = productCreate;\n\n  const productsList = useSelector((state) => state.productsList);\n  const { products, loading, error } = productsList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const productDelete = useSelector((state) => state.productDelete);\n  const { success: successDelete } = productDelete;\n\n  useEffect(() => {\n    dispatch({ type: CREATE_PRODUCT_RESET });\n    if (userInfo && userInfo.userType === \"seller\") {\n      history.push(\"/login\");\n    }\n    if (!userInfo) {\n      history.push(\"/login\");\n    }\n    if (successCreate) {\n      history.push(`/product/${createdProduct._id}/edit`);\n    } else {\n      dispatch(listProducts());\n    }\n  }, [dispatch, userInfo, history, successDelete, successCreate]);\n\n  const deleteHandler = (id) => {\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deleteProduct(id));\n    }\n  };\n\n  const createProductHandler = () => {\n    dispatch(createProduct());\n  };\n\n  return (\n    <div className='justify-content-center'>\n      <Row>\n        <Col>\n          {loading ? (\n            <Loader />\n          ) : loadingCreate ? (\n            <Loader />\n          ) : error ? (\n            <Message variant='danger'>{error}</Message>\n          ) : errorCreate ? (\n            <Message variant='danger'>{errorCreate}</Message>\n          ) : (\n            <>\n              <Row className='align-items-center'>\n                <Col>\n                  <h2>Products</h2>\n                </Col>\n                <Col className='text-right'>\n                  <Button\n                    className='my-3 rounded'\n                    onClick={createProductHandler}\n                  >\n                    <i className='fas fa-plus-circle fa-fw'></i> Add Products\n                  </Button>\n                </Col>\n              </Row>\n              <Table striped bordered hover responsive className='table-sm'>\n                <thead>\n                  <tr>\n                    <th>Id</th>\n                    <th>Name</th>\n                    <th>Price</th>\n                    <th>Category</th>\n                    <th>Brand</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {products.map((product) => (\n                    <tr key={product._id}>\n                      <td>{product._id}</td>\n                      <td>\n                        <a href={`product/${product.name}`}>{product.name}</a>\n                      </td>\n                      <td>{product.price}</td>\n                      <td>{product.category}</td>\n                      <td>{product.brand}</td>\n                      <td>\n                        <LinkContainer to={`/product/${product._id}/edit`}>\n                          <Button variant='light' className='btn-sm'>\n                            <i className='fas fa-edit fa-fw'></i>\n                          </Button>\n                        </LinkContainer>\n                        <Button\n                          variant='danger'\n                          className='btn-sm'\n                          onClick={() => deleteHandler(product._id)}\n                        >\n                          <i className='fas fa-trash fa-fw'></i>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Products;\n","/home/kagorora/Documents/dms/dms-f/src/components/order/Order.js",["165"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport {\n  getOrderDetails,\n  payOrder,\n  markOrderAsDelivered,\n} from \"../../store/actions/orderActions.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport { ORDER_PAY_RESET } from \"../../store/types/types\";\n\nconst Order = ({ match, history }) => {\n  const orderId = match.params.id;\n\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, loading, error } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { success: successPay, loading: loadingPay } = orderPay;\n\n  const deliverOrder = useSelector((state) => state.deliverOrder);\n  const {\n    success: successDelivered,\n    loading: loadingDelivered,\n    error: errorDelivered,\n  } = deliverOrder;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  if (!loading) {\n    // Calculate prices\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    }\n  }, [userInfo, history]);\n\n  useEffect(() => {\n    if (successDelivered) {\n      dispatch(getOrderDetails(orderId));\n    }\n  }, [successDelivered]);\n\n  useEffect(() => {\n    if (order && orderId !== order._id) {\n      dispatch(getOrderDetails(orderId));\n    } else {\n      const addPayPalScript = async () => {\n        const { data: clientId } = await axios.get(\"/api/config/paypal\");\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n        script.async = true;\n        script.onload = () => {\n          setSdkReady(true);\n        };\n        document.body.appendChild(script);\n      };\n\n      if (!order || successPay) {\n        dispatch({ type: ORDER_PAY_RESET });\n        dispatch(getOrderDetails(orderId));\n      } else if (!order.isPaid) {\n        if (!window.paypal) {\n          addPayPalScript();\n        } else {\n          setSdkReady(true);\n        }\n      }\n    }\n  }, [dispatch, orderId, successPay, order]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  const deliverHandler = () => {\n    dispatch(markOrderAsDelivered(orderId));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : loadingDelivered ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : errorDelivered ? (\n    <Message variant='danger'>{errorDelivered}</Message>\n  ) : (\n    <>\n      <h1 className='mt-4'>Order: {order._id}</h1>\n      <>\n        <Row>\n          <Col md={8}>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Destination</h2>\n                <p>\n                  <strong>Name: </strong>\n                  {order.user.name}\n                </p>\n                <p>\n                  <strong>Email: </strong>\n                  <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n                </p>\n                <p>\n                  <strong>Address: </strong>\n                  {order.orderAddress.Province}, {order.orderAddress.District},{\" \"}\n                  {order.orderAddress.Sector}, {order.orderAddress.cell},{\" \"}\n                  {order.orderAddress.city}, {order.orderAddress.streetNumber}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isDelivered ? (\n                <Message variant='danger'>Not Delivered</Message>\n              ) : (\n                <Message variant='success'>\n                  delivered on {order.deliveredAt}\n                </Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Payment Method</h2>\n                <p>\n                  <strong>Method: </strong>\n                  {order.paymentMethod}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isPaid ? (\n                <Message variant='danger'>Not Paid</Message>\n              ) : (\n                <Message variant='success'>Paid on {order.paidAt}</Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Order Items</h2>\n                {order.orderItems.length === 0 ? (\n                  <Message>Order is Empty</Message>\n                ) : (\n                  <ListGroup variant='flush'>\n                    {order.orderItems.map((item, index) => (\n                      <ListGroup.Item key={index}>\n                        <Row>\n                          <Col md={1}>\n                            <Image\n                              src={item.image}\n                              alt={item.name}\n                              fluid\n                              rounded\n                            />\n                          </Col>\n                          <Col>\n                            <Link to={`/product/${item.product}`}>\n                              {item.name}\n                            </Link>\n                          </Col>\n                          <Col md={4}>\n                            {item.qty} * {item.price} = FRW\n                            {item.qty * item.price}\n                          </Col>\n                        </Row>\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                )}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n\n          <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n            <Card>\n              <ListGroup variant='flush'>\n                <ListGroup.Item>\n                  <h2>Order Summary</h2>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Items</Col>\n                    <Col>FRW {order.itemsPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Transport</Col>\n                    <Col>FRW {order.deliveryPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax</Col>\n                    <Col>FRW {order.taxPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total Amount</Col>\n                    <Col>FRW {order.totalPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                {!order.isPaid && (\n                  <ListGroup.Item>\n                    {loadingPay && <Loader />}\n                    {!sdkReady ? (\n                      <Loader />\n                    ) : (\n                      <PayPalButton\n                        amount={order.totalPrice}\n                        onSuccess={successPaymentHandler}\n                      />\n                    )}\n                  </ListGroup.Item>\n                )}\n                {!successDelivered &&\n                  userInfo &&\n                  userInfo.userType === \"admin\" &&\n                  order.isPaid &&\n                  !order.isDelivered && (\n                    <ListGroup.Item>\n                      <Button\n                        type='button'\n                        className='btn btn-block rounded'\n                        onClick={deliverHandler}\n                      >\n                        Mark as Delivered\n                      </Button>\n                    </ListGroup.Item>\n                  )}\n              </ListGroup>\n            </Card>\n          </Col>\n        </Row>\n      </>\n    </>\n  );\n};\n\nexport default Order;\n","/home/kagorora/Documents/dms/dms-f/src/components/buyer/Buyer.js",[],["166","167"],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/Header/Header.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/Loader.js",[],["168","169"],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/FormContainer.js",[],"/home/kagorora/Documents/dms/dms-f/src/store/actions/orderActions.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/SearchBox/SearchBox.js",["170"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nconst SearchBox = ({ history }) => {\n  const [keyword, setKeyword] = useState(\"\");\n\n  const submitHandler = (e) => {    \n    e.preventDefault();\n    if (keyword.trim()) {\n      history.push(`/search/${keyword}`);\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <Form onSubmit={submitHandler} inline>\n      <Form.Control\n        type=\"text\"\n        name=\"q\"\n        onChange={(e) => setKeyword(e.target.value)}\n        placeholder=\"Search Products...\"\n        className=\"mr-sm-2 ml-sm-5\"\n      ></Form.Control>\n      <Button type=\"submit\" variant=\"outline-success\" className=\"p-2\">\n        Search\n      </Button>\n    </Form>\n  );\n};\n\nexport default SearchBox;","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Product/Product.js",[],"/home/kagorora/Documents/dms/dms-f/src/store/reducers/cartReducers.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/profile/Profile.js",["171","172"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getUserProfile,\n  UpdateUserProfile,\n} from \"../../store/actions/usersActions.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\n\nconst Profile = ({ history }) => {\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { user, loading, error } = userProfile;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userProfileReset = useSelector((state) => state.userProfileReset);\n  const { success } = userProfileReset;\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      if (!user.name) {\n        dispatch(getUserProfile(\"profile\"));\n      } else {\n        setName(user.name);\n        setPhoneNumber(user.phoneNumber);\n        setNationalId(user.nationalId);\n        setEmail(user.email);\n        setAddress(user.address);\n        setUserType(user.userType);\n        setMessage(user.message);\n      }\n    }\n  }, [dispatch, history, userInfo, user]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password && confirmPassword && password !== confirmPassword) {\n      setMessage(\"passwords are not matching!, try again\");\n    } else {\n      dispatch(\n        UpdateUserProfile({\n          id: user._id,\n          name,\n          phoneNumber,\n          nationalId,\n          email,\n          address,\n          userType,\n        })\n      );\n    }\n  };\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        {loading && <Loader />}\n        {error && <Message variant='danger'>{error}</Message>}\n        {success && <Message variant='success'>{\"Profile Updated\"}</Message>}\n        <Form onSubmit={handleSubmit}>\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setAddress(e.target.value)}\n              value={address}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n              disabled='disabled'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setPassword(e.target.value)}\n              value={password}\n              placeholder='enter password'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>comfirm password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              value={confirmPassword}\n              placeholder='confirm password'\n            ></Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            Update\n          </Button>\n        </Form>\n      </Col>\n      <Col md={9}>\n        <h2>My Orders</h2>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Profile;\n","/home/kagorora/Documents/dms/dms-f/src/components/myOrders/MyOrders.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/admin/EditUser.js",["173"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FormContainer from \"../reusable/FormContainer.js\";\nimport { getUserProfile, editUser } from \"../../store/actions/usersActions.js\";\nimport {\n  ADMIN_UPDATE_USER_RESET,\n  USER_PROFILE_RESET,\n} from \"../../store/types/types.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\n\nconst EditUserInfo = ({ match, history }) => {\n  const userId = match.params.id;\n\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [message] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { loading, error, user } = userProfile;\n\n  const updateUser = useSelector((state) => state.updateUser);\n  const { success: successUpdate } = updateUser;\n\n  useEffect(() => {\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserProfile(userId));\n    } else {\n      setName(user.name);\n      setPhoneNumber(user.phoneNumber);\n      setNationalId(user.nationalId);\n      setEmail(user.email);\n      setLocation(user.location);\n      setUserType(user.userType);\n    }\n  }, [dispatch, history, user, userId, successUpdate]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      editUser({\n        _id: userId,\n        name,\n        phoneNumber,\n        nationalId,\n        email,\n        location,\n        userType,\n        message,\n      })\n    );\n  };\n\n  const resetUserResultHanlder = () => {\n    dispatch({ type: USER_PROFILE_RESET });\n    dispatch({ type: ADMIN_UPDATE_USER_RESET });\n    history.push(\"/admin/users\");\n  };\n\n  return (\n    <>\n      <Button onClick={resetUserResultHanlder} className='rounded'>\n        <i className='fas fa-chevron-left fa-fw'></i> Go Back\n      </Button>\n      <FormContainer>\n        <h1>UPDATE USER</h1>\n        {loading ? (\n          <Loader />\n        ) : (\n          error && <Message variant='danger'>{error}</Message>\n        )}\n\n        <Form onSubmit={handleSubmit}>\n          {successUpdate && <Message variant='success'>User Updated</Message>}\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setLocation(e.target.value)}\n              value={location}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              as='select'\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n            >\n              <option>buyer</option>\n              <option>seller</option>\n            </Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            UPDATE\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default EditUserInfo;\n","/home/kagorora/Documents/dms/dms-f/src/components/reusable/Footer/Footer.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js",[],"/home/kagorora/Documents/dms/dms-f/src/store/actions/cartsActions.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/reusable/Rating/Rating.js",[],"/home/kagorora/Documents/dms/dms-f/src/App.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/login/Login.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/admin/Orders.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/placeOrder/PlaceOrder.js",["174"],"import React, { useEffect } from \"react\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport CheckoutSteps from \"../reusable/CheckoutSteps/CheckoutSteps.js\";\nimport { createOrder } from \"../../store/actions/orderActions.js\";\n\nconst PlaceOrder = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress, paymentMethod, cartItems } = cart;\n  const {\n    Province,\n    District,\n    Sector,\n    cell,\n    city,\n    streetNumber,\n  } = shippingAddress;\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  const itemsPrice = addDecimals(\n    cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  const shippingPrice = addDecimals(itemsPrice > 100 ? 0 : 100);\n\n  const taxPrice = addDecimals(Number((0.15 * itemsPrice).toFixed(2)));\n\n  const totalPrice = (\n    Number(itemsPrice) +\n    Number(shippingPrice) +\n    Number(taxPrice)\n  ).toFixed(2);\n\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, success, error } = orderCreate;\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n    }\n  }, [history, success]);\n\n  const placeOrderHandler = () => {\n    dispatch(\n      createOrder({\n        orderItems: cartItems,\n        orderAddress: shippingAddress,\n        paymentMethod: paymentMethod,\n        itemsPrice: itemsPrice,\n        shippingPrice: shippingPrice,\n        taxPrice: taxPrice,\n        totalPrice: totalPrice,\n      })\n    );\n  };\n\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Destination</h2>\n              <p>\n                <strong>Address: </strong>\n                {Province}, {District}, {Sector}, {cell}, {city}, {streetNumber}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {paymentMethod}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cartItems.length === 0 ? (\n                <Message>Your cart is Empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} * {item.price} = FRW\n                          {item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>FRW {itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Transport</Col>\n                  <Col>FRW {shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>FRW {taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total Amount</Col>\n                  <Col>FRW {totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {error && (\n                <ListGroup.Item>\n                  <Message variant='danger'>{error}</Message>\n                </ListGroup.Item>\n              )}\n              <ListGroup.Item>\n                <Button\n                  type='button'\n                  className='btn-block'\n                  disabled={cartItems.length === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceOrder;\n","/home/kagorora/Documents/dms/dms-f/src/components/productDetails/ProductDetails.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/shipping/Shipping.js",[],"/home/kagorora/Documents/dms/dms-f/src/store.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/admin/Users.js",[],"/home/kagorora/Documents/dms/dms-f/src/store/types/types.js",[],"/home/kagorora/Documents/dms/dms-f/src/store/actions/usersActions.js",[],"/home/kagorora/Documents/dms/dms-f/src/components/admin/EditProduct.js",["175"],"/home/kagorora/Documents/dms/dms-f/src/store/actions/productsActions.js",[],{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"176","replacedBy":"180"},{"ruleId":"178","replacedBy":"181"},{"ruleId":"176","replacedBy":"182"},{"ruleId":"178","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":112,"column":44,"nodeType":"186","messageId":"187","endLine":112,"endColumn":46},{"ruleId":"188","severity":1,"message":"189","line":18,"column":12,"nodeType":"190","messageId":"191","endLine":18,"endColumn":19},{"ruleId":"188","severity":1,"message":"192","line":18,"column":21,"nodeType":"190","messageId":"191","endLine":18,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":47,"column":6,"nodeType":"195","endLine":47,"endColumn":65,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":60,"column":6,"nodeType":"195","endLine":60,"endColumn":24,"suggestions":"198"},{"ruleId":"176","replacedBy":"199"},{"ruleId":"178","replacedBy":"200"},{"ruleId":"176","replacedBy":"201"},{"ruleId":"178","replacedBy":"202"},{"ruleId":"188","severity":1,"message":"203","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"193","severity":1,"message":"204","line":12,"column":9,"nodeType":"205","endLine":12,"endColumn":37},{"ruleId":"188","severity":1,"message":"206","line":22,"column":10,"nodeType":"190","messageId":"191","endLine":22,"endColumn":17},{"ruleId":"193","severity":1,"message":"207","line":16,"column":9,"nodeType":"205","endLine":16,"endColumn":37},{"ruleId":"193","severity":1,"message":"208","line":48,"column":6,"nodeType":"195","endLine":48,"endColumn":24,"suggestions":"209"},{"ruleId":"193","severity":1,"message":"210","line":21,"column":9,"nodeType":"205","endLine":21,"endColumn":37},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],["211"],["212"],["211"],["212"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'address' is assigned a value but never used.","Identifier","unusedVar","'setAddress' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array.","ArrayExpression",["213"],"React Hook useEffect has missing dependencies: 'dispatch' and 'orderId'. Either include them or remove the dependency array.",["214"],["211"],["212"],["211"],["212"],"'useEffect' is defined but never used.","The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 49) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","VariableDeclarator","'message' is assigned a value but never used.","The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 43) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["215"],"The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 59) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","no-global-assign","no-unsafe-negation",{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]",{"range":"222","text":"223"},"Update the dependencies array to be: [dispatch, orderId, successDelivered]",{"range":"224","text":"225"},"Update the dependencies array to be: [history, order._id, success]",{"range":"226","text":"227"},[1449,1508],"[dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]",[1727,1745],"[dispatch, orderId, successDelivered]",[1360,1378],"[history, order._id, success]"]
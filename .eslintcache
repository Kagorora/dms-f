[{"/home/kagorora/Documents/dms-f/src/store/types/types.js":"1","/home/kagorora/Documents/dms-f/src/store/reducers/userReducers.js":"2","/home/kagorora/Documents/dms-f/src/store.js":"3","/home/kagorora/Documents/dms-f/src/store/actions/usersActions.js":"4","/home/kagorora/Documents/dms-f/src/components/reusable/Header/Header.js":"5","/home/kagorora/Documents/dms-f/src/App.js":"6","/home/kagorora/Documents/dms-f/src/components/register/Register.js":"7","/home/kagorora/Documents/dms-f/src/components/paymentMethod/PaymentMethod.js":"8","/home/kagorora/Documents/dms-f/src/components/profile/Profile.js":"9","/home/kagorora/Documents/dms-f/src/components/reusable/FormContainer.js":"10","/home/kagorora/Documents/dms-f/src/components/reusable/Product/Product.js":"11","/home/kagorora/Documents/dms-f/src/store/actions/orderActions.js":"12","/home/kagorora/Documents/dms-f/src/components/admin/Users.js":"13","/home/kagorora/Documents/dms-f/src/store/reducers/productReducers.js":"14","/home/kagorora/Documents/dms-f/src/components/placeOrder/PlaceOrder.js":"15","/home/kagorora/Documents/dms-f/src/components/shipping/Shipping.js":"16","/home/kagorora/Documents/dms-f/src/components/reusable/Message.js":"17","/home/kagorora/Documents/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js":"18","/home/kagorora/Documents/dms-f/src/store/actions/cartsActions.js":"19","/home/kagorora/Documents/dms-f/src/components/reusable/Rating/Rating.js":"20","/home/kagorora/Documents/dms-f/src/components/cart/Cart.js":"21","/home/kagorora/Documents/dms-f/src/components/reusable/Footer/Footer.js":"22","/home/kagorora/Documents/dms-f/src/components/myOrders/MyOrders.js":"23","/home/kagorora/Documents/dms-f/src/components/admin/EditUser.js":"24","/home/kagorora/Documents/dms-f/src/index.js":"25","/home/kagorora/Documents/dms-f/src/store/reducers/orderReducers.js":"26","/home/kagorora/Documents/dms-f/src/components/login/Login.js":"27","/home/kagorora/Documents/dms-f/src/components/order/Order.js":"28","/home/kagorora/Documents/dms-f/src/store/reducers/cartReducers.js":"29","/home/kagorora/Documents/dms-f/src/components/buyer/Buyer.js":"30","/home/kagorora/Documents/dms-f/src/components/productDetails/ProductDetails.js":"31","/home/kagorora/Documents/dms-f/src/store/actions/productsActions.js":"32","/home/kagorora/Documents/dms-f/src/components/admin/Products.js":"33","/home/kagorora/Documents/dms-f/src/components/admin/EditProduct.js":"34","/home/kagorora/Documents/dms-f/src/components/admin/Orders.js":"35"},{"size":4614,"mtime":1613143782193,"results":"36","hashOfConfig":"37"},{"size":3491,"mtime":1613111440538,"results":"38","hashOfConfig":"37"},{"size":2441,"mtime":1613144085915,"results":"39","hashOfConfig":"37"},{"size":6238,"mtime":1613050742193,"results":"40","hashOfConfig":"37"},{"size":3492,"mtime":1613133178818,"results":"41","hashOfConfig":"37"},{"size":2327,"mtime":1613132276941,"results":"42","hashOfConfig":"37"},{"size":4847,"mtime":1612243518508,"results":"43","hashOfConfig":"37"},{"size":1792,"mtime":1612738478893,"results":"44","hashOfConfig":"37"},{"size":4959,"mtime":1612275251103,"results":"45","hashOfConfig":"37"},{"size":336,"mtime":1612243518508,"results":"46","hashOfConfig":"37"},{"size":913,"mtime":1612243518508,"results":"47","hashOfConfig":"37"},{"size":4729,"mtime":1613148024392,"results":"48","hashOfConfig":"37"},{"size":3376,"mtime":1613117872779,"results":"49","hashOfConfig":"37"},{"size":2668,"mtime":1613122278382,"results":"50","hashOfConfig":"37"},{"size":5161,"mtime":1612987280515,"results":"51","hashOfConfig":"37"},{"size":3031,"mtime":1612738478917,"results":"52","hashOfConfig":"37"},{"size":244,"mtime":1612194906661,"results":"53","hashOfConfig":"37"},{"size":1263,"mtime":1612738478917,"results":"54","hashOfConfig":"37"},{"size":1238,"mtime":1612738478917,"results":"55","hashOfConfig":"37"},{"size":1541,"mtime":1612243518508,"results":"56","hashOfConfig":"37"},{"size":3548,"mtime":1613117879671,"results":"57","hashOfConfig":"37"},{"size":310,"mtime":1612243518508,"results":"58","hashOfConfig":"37"},{"size":2846,"mtime":1613136738371,"results":"59","hashOfConfig":"37"},{"size":4333,"mtime":1613050742177,"results":"60","hashOfConfig":"37"},{"size":319,"mtime":1612197568095,"results":"61","hashOfConfig":"37"},{"size":3644,"mtime":1613144027086,"results":"62","hashOfConfig":"37"},{"size":2235,"mtime":1612246403732,"results":"63","hashOfConfig":"37"},{"size":7966,"mtime":1613147948429,"results":"64","hashOfConfig":"37"},{"size":1303,"mtime":1612838980033,"results":"65","hashOfConfig":"37"},{"size":1001,"mtime":1612245195426,"results":"66","hashOfConfig":"37"},{"size":3897,"mtime":1612246014554,"results":"67","hashOfConfig":"37"},{"size":3506,"mtime":1613121200259,"results":"68","hashOfConfig":"37"},{"size":4231,"mtime":1613117847721,"results":"69","hashOfConfig":"37"},{"size":5875,"mtime":1613125818407,"results":"70","hashOfConfig":"37"},{"size":2922,"mtime":1613143336192,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d7x57r",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"103"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kagorora/Documents/dms-f/src/store/types/types.js",[],"/home/kagorora/Documents/dms-f/src/store/reducers/userReducers.js",[],"/home/kagorora/Documents/dms-f/src/store.js",[],"/home/kagorora/Documents/dms-f/src/store/actions/usersActions.js",[],["153","154"],"/home/kagorora/Documents/dms-f/src/components/reusable/Header/Header.js",[],["155","156"],"/home/kagorora/Documents/dms-f/src/App.js",[],"/home/kagorora/Documents/dms-f/src/components/register/Register.js",[],"/home/kagorora/Documents/dms-f/src/components/paymentMethod/PaymentMethod.js",[],"/home/kagorora/Documents/dms-f/src/components/profile/Profile.js",["157","158"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getUserProfile,\n  UpdateUserProfile,\n} from \"../../store/actions/usersActions.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\n\nconst Profile = ({ history }) => {\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { user, loading, error } = userProfile;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userProfileReset = useSelector((state) => state.userProfileReset);\n  const { success } = userProfileReset;\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      if (!user.name) {\n        dispatch(getUserProfile(\"profile\"));\n      } else {\n        setName(user.name);\n        setPhoneNumber(user.phoneNumber);\n        setNationalId(user.nationalId);\n        setEmail(user.email);\n        setAddress(user.address);\n        setUserType(user.userType);\n        setMessage(user.message);\n      }\n    }\n  }, [dispatch, history, userInfo, user]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password && confirmPassword && password !== confirmPassword) {\n      setMessage(\"passwords are not matching!, try again\");\n    } else {\n      dispatch(\n        UpdateUserProfile({\n          id: user._id,\n          name,\n          phoneNumber,\n          nationalId,\n          email,\n          address,\n          userType,\n        })\n      );\n    }\n  };\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        {loading && <Loader />}\n        {error && <Message variant='danger'>{error}</Message>}\n        {success && <Message variant='success'>{\"Profile Updated\"}</Message>}\n        <Form onSubmit={handleSubmit}>\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setAddress(e.target.value)}\n              value={address}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n              disabled='disabled'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setPassword(e.target.value)}\n              value={password}\n              placeholder='enter password'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>comfirm password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              value={confirmPassword}\n              placeholder='confirm password'\n            ></Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            Update\n          </Button>\n        </Form>\n      </Col>\n      <Col md={9}>\n        <h2>My Orders</h2>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Profile;\n","/home/kagorora/Documents/dms-f/src/components/reusable/FormContainer.js",[],["159","160"],"/home/kagorora/Documents/dms-f/src/components/reusable/Product/Product.js",[],["161","162"],"/home/kagorora/Documents/dms-f/src/store/actions/orderActions.js",[],"/home/kagorora/Documents/dms-f/src/components/admin/Users.js",[],["163","164"],"/home/kagorora/Documents/dms-f/src/store/reducers/productReducers.js",[],"/home/kagorora/Documents/dms-f/src/components/placeOrder/PlaceOrder.js",["165"],"import React, { useEffect } from \"react\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport CheckoutSteps from \"../reusable/CheckoutSteps/CheckoutSteps.js\";\nimport { createOrder } from \"../../store/actions/orderActions.js\";\n\nconst PlaceOrder = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress, paymentMethod, cartItems } = cart;\n  const {\n    Province,\n    District,\n    Sector,\n    cell,\n    city,\n    streetNumber,\n  } = shippingAddress;\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  const itemsPrice = addDecimals(\n    cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  const shippingPrice = addDecimals(itemsPrice > 100 ? 0 : 100);\n\n  const taxPrice = addDecimals(Number((0.15 * itemsPrice).toFixed(2)));\n\n  const totalPrice = (\n    Number(itemsPrice) +\n    Number(shippingPrice) +\n    Number(taxPrice)\n  ).toFixed(2);\n\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, success, error } = orderCreate;\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n    }\n  }, [history, success]);\n\n  const placeOrderHandler = () => {\n    dispatch(\n      createOrder({\n        orderItems: cartItems,\n        orderAddress: shippingAddress,\n        paymentMethod: paymentMethod,\n        itemsPrice: itemsPrice,\n        shippingPrice: shippingPrice,\n        taxPrice: taxPrice,\n        totalPrice: totalPrice,\n      })\n    );\n  };\n\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Destination</h2>\n              <p>\n                <strong>Address: </strong>\n                {Province}, {District}, {Sector}, {cell}, {city}, {streetNumber}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {paymentMethod.paymentMethod}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cartItems.length === 0 ? (\n                <Message>Your cart is Empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} * {item.price} = FRW\n                          {item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>FRW {itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Transport</Col>\n                  <Col>FRW {shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>FRW {taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total Amount</Col>\n                  <Col>FRW {totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {error && (\n                <ListGroup.Item>\n                  <Message variant='danger'>{error}</Message>\n                </ListGroup.Item>\n              )}\n              <ListGroup.Item>\n                <Button\n                  type='button'\n                  className='btn-block'\n                  disabled={cartItems.length === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceOrder;\n","/home/kagorora/Documents/dms-f/src/components/shipping/Shipping.js",[],"/home/kagorora/Documents/dms-f/src/components/reusable/Message.js",[],"/home/kagorora/Documents/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js",[],"/home/kagorora/Documents/dms-f/src/store/actions/cartsActions.js",[],"/home/kagorora/Documents/dms-f/src/components/reusable/Rating/Rating.js",[],"/home/kagorora/Documents/dms-f/src/components/cart/Cart.js",[],"/home/kagorora/Documents/dms-f/src/components/reusable/Footer/Footer.js",[],"/home/kagorora/Documents/dms-f/src/components/myOrders/MyOrders.js",[],"/home/kagorora/Documents/dms-f/src/components/admin/EditUser.js",["166"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FormContainer from \"../reusable/FormContainer.js\";\nimport { getUserProfile, editUser } from \"../../store/actions/usersActions.js\";\nimport {\n  ADMIN_UPDATE_USER_RESET,\n  USER_PROFILE_RESET,\n} from \"../../store/types/types.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\n\nconst EditUserInfo = ({ match, history }) => {\n  const userId = match.params.id;\n\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [message] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { loading, error, user } = userProfile;\n\n  const updateUser = useSelector((state) => state.updateUser);\n  const {\n    success: successUpdate,\n  } = updateUser;\n\n  useEffect(() => {\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserProfile(userId));\n    } else {\n      setName(user.name);\n      setPhoneNumber(user.phoneNumber);\n      setNationalId(user.nationalId);\n      setEmail(user.email);\n      setLocation(user.location);\n      setUserType(user.userType);\n    }\n  }, [dispatch, history, user, userId, successUpdate]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      editUser({\n        _id: userId,\n        name,\n        phoneNumber,\n        nationalId,\n        email,\n        location,\n        userType,\n        message,\n      })\n    );\n  };\n\n  const resetUserResultHanlder = () => {\n    dispatch({ type: USER_PROFILE_RESET });\n    dispatch({ type: ADMIN_UPDATE_USER_RESET });\n    history.push(\"/admin/users\");\n  };\n\n  return (\n    <>\n      <Button onClick={resetUserResultHanlder}>Go Back</Button>\n      <FormContainer>\n        <h1>UPDATE USER</h1>\n        {loading ? (\n          <Loader />\n        ) : (\n          error && <Message variant='danger'>{error}</Message>\n        )}\n\n        <Form onSubmit={handleSubmit}>\n          {successUpdate && <Message variant='success'>User Updated</Message>}\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setLocation(e.target.value)}\n              value={location}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              as='select'\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n            >\n              <option>buyer</option>\n              <option>seller</option>\n            </Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            UPDATE\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default EditUserInfo;\n","/home/kagorora/Documents/dms-f/src/index.js",[],"/home/kagorora/Documents/dms-f/src/store/reducers/orderReducers.js",[],"/home/kagorora/Documents/dms-f/src/components/login/Login.js",[],"/home/kagorora/Documents/dms-f/src/components/order/Order.js",["167"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport {\n  getOrderDetails,\n  payOrder,\n  markOrderAsDelivered,\n} from \"../../store/actions/orderActions.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport { ORDER_PAY_RESET } from \"../../store/types/types\";\n\nconst Order = ({ match }) => {\n  const orderId = match.params.id;\n\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, loading, error } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { success: successPay, loading: loadingPay } = orderPay;\n\n  const deliverOrder = useSelector((state) => state.deliverOrder);\n  const {\n    success: successDelivered,\n    loading: loadingDelivered,\n    error: errorDelivered,\n  } = deliverOrder;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  if (!loading) {\n    // Calculate prices\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  useEffect(() => {\n    if (successDelivered) {\n      dispatch(getOrderDetails(orderId));\n    }\n  }, [successDelivered]);\n\n  useEffect(() => {\n    if (order && orderId !== order._id) {\n      dispatch(getOrderDetails(orderId));\n    } else {\n      const addPayPalScript = async () => {\n        const { data: clientId } = await axios.get(\"/api/config/paypal\");\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n        script.async = true;\n        script.onload = () => {\n          setSdkReady(true);\n        };\n        document.body.appendChild(script);\n      };\n\n      if (!order || successPay) {\n        dispatch({ type: ORDER_PAY_RESET });\n        dispatch(getOrderDetails(orderId));\n      } else if (!order.isPaid) {\n        if (!window.paypal) {\n          addPayPalScript();\n        } else {\n          setSdkReady(true);\n        }\n      }\n    }\n  }, [dispatch, orderId, successPay, order]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  const deliverHandler = () => {\n    dispatch(markOrderAsDelivered(orderId));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : loadingDelivered ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : errorDelivered ? (\n    <Message variant='danger'>{errorDelivered}</Message>\n  ) : (\n    <>\n      <h1 className='mt-4'>Order: {order._id}</h1>\n      <>\n        <Row>\n          <Col md={8}>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Destination</h2>\n                <p>\n                  <strong>Name: </strong>\n                  {order.user.name}\n                </p>\n                <p>\n                  <strong>Email: </strong>\n                  <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n                </p>\n                <p>\n                  <strong>Address: </strong>\n                  {order.orderAddress.Province}, {order.orderAddress.District},{\" \"}\n                  {order.orderAddress.Sector}, {order.orderAddress.cell},{\" \"}\n                  {order.orderAddress.city}, {order.orderAddress.streetNumber}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isDelivered ? (\n                <Message variant='danger'>Not Delivered</Message>\n              ) : (\n                <Message variant='success'>\n                  delivered on {order.deliveredAt}\n                </Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Payment Method</h2>\n                <p>\n                  <strong>Method: </strong>\n                  {order.paymentMethod}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isPaid ? (\n                <Message variant='danger'>Not Paid</Message>\n              ) : (\n                <Message variant='success'>Paid on {order.paidAt}</Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Order Items</h2>\n                {order.orderItems.length === 0 ? (\n                  <Message>Order is Empty</Message>\n                ) : (\n                  <ListGroup variant='flush'>\n                    {order.orderItems.map((item, index) => (\n                      <ListGroup.Item key={index}>\n                        <Row>\n                          <Col md={1}>\n                            <Image\n                              src={item.image}\n                              alt={item.name}\n                              fluid\n                              rounded\n                            />\n                          </Col>\n                          <Col>\n                            <Link to={`/product/${item.product}`}>\n                              {item.name}\n                            </Link>\n                          </Col>\n                          <Col md={4}>\n                            {item.qty} * {item.price} = FRW\n                            {item.qty * item.price}\n                          </Col>\n                        </Row>\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                )}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n\n          <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n            <Card>\n              <ListGroup variant='flush'>\n                <ListGroup.Item>\n                  <h2>Order Summary</h2>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Items</Col>\n                    <Col>FRW {order.itemsPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Transport</Col>\n                    <Col>FRW {order.deliveryPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax</Col>\n                    <Col>FRW {order.taxPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total Amount</Col>\n                    <Col>FRW {order.totalPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                {!order.isPaid && (\n                  <ListGroup.Item>\n                    {loadingPay && <Loader />}\n                    {!sdkReady ? (\n                      <Loader />\n                    ) : (\n                      <PayPalButton\n                        amount={order.totalPrice}\n                        onSuccess={successPaymentHandler}\n                      />\n                    )}\n                  </ListGroup.Item>\n                )}\n                {!successDelivered &&\n                  userInfo &&\n                  userInfo.userType === \"admin\" && (\n                    <ListGroup.Item>\n                      <Button\n                        type='button'\n                        className='btn btn-block rounded'\n                        onClick={deliverHandler}\n                      >\n                        Mark as Delivered\n                      </Button>\n                    </ListGroup.Item>\n                  )}\n              </ListGroup>\n            </Card>\n          </Col>\n        </Row>\n      </>\n    </>\n  );\n};\n\nexport default Order;\n","/home/kagorora/Documents/dms-f/src/store/reducers/cartReducers.js",[],"/home/kagorora/Documents/dms-f/src/components/buyer/Buyer.js",[],"/home/kagorora/Documents/dms-f/src/components/productDetails/ProductDetails.js",[],["168","169"],"/home/kagorora/Documents/dms-f/src/store/actions/productsActions.js",[],"/home/kagorora/Documents/dms-f/src/components/admin/Products.js",["170"],"/home/kagorora/Documents/dms-f/src/components/admin/EditProduct.js",["171"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FormContainer from \"../reusable/FormContainer.js\";\nimport {\n  listProductDetails,\n  updateProduct,\n} from \"../../store/actions/productsActions.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport {\n  UPDATE_PRODUCT_RESET,\n  CREATE_PRODUCT_RESET,\n  PRODUCT_DETAILS_RESET,\n} from \"../../store/types/types.js\";\n\nconst EditProduct = ({ match, history }) => {\n  const productId = match.params.id;\n\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [countInStock, setCountInStock] = useState(0);\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n\n  const [uploading, setUploading] = useState(false);\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n\n  const productUpdate = useSelector((state) => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch(listProductDetails(productId));\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setCountInStock(product.countInStock);\n        setImage(product.image);\n        setDescription(product.description);\n        setBrand(product.brand);\n        setCategory(product.category);\n      }\n    }\n  }, [dispatch, history, product, productId, successUpdate]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        countInStock,\n        image,\n        description,\n        brand,\n        category,\n      })\n    );\n  };\n\n  const goBackHandler = () => {\n    dispatch({ type: UPDATE_PRODUCT_RESET });\n    dispatch({ type: CREATE_PRODUCT_RESET });\n    dispatch({ type: PRODUCT_DETAILS_RESET });\n    history.push(\"/admin/products\");\n  };\n\n  const uploadFileHandler = async (e) => {\n    const file = e.target.files[0];\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      };\n\n      const { data } = await axios.post(\"/api/upload\", formData, config);\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={goBackHandler} className='rounded'>\n        <i className='fas fa-chevron-left fa-fw'></i> Go Back\n      </Button>\n      <FormContainer>\n        <h1>UPDATE PRODUCT</h1>\n        {loading ? (\n          <Loader />\n        ) : loadingUpdate ? (\n          <Loader />\n        ) : (\n          error && <Message variant='danger'>{error}</Message>\n        )}\n\n        <Form onSubmit={handleSubmit}>\n          {successUpdate && (\n            <Message variant='success'>Product Updated</Message>\n          )}\n          {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>PRICE</Form.Label>\n            <Form.Control\n              onChange={(e) => setPrice(e.target.value)}\n              value={price}\n              placeholder='enter PRICE'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              onChange={(e) => setImage(e.target.value)}\n              value={image}\n              placeholder='enter Image'\n            ></Form.Control>\n            <Form.File\n              id='image-file'\n              label='Upload Image'\n              custom\n              onChange={uploadFileHandler}\n            >\n              {uploading && <Loader />}\n            </Form.File>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>Brand</Form.Label>\n            <Form.Control\n              onChange={(e) => setBrand(e.target.value)}\n              value={brand}\n              placeholder='enter Brand'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>countInStock</Form.Label>\n            <Form.Control\n              onChange={(e) => setCountInStock(e.target.value)}\n              value={countInStock}\n              placeholder='enter countInStock'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>category</Form.Label>\n            <Form.Control\n              onChange={(e) => setCategory(e.target.value)}\n              value={category}\n              placeholder='enter category'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>description</Form.Label>\n            <Form.Control\n              onChange={(e) => setDescription(e.target.value)}\n              value={description}\n              placeholder='enter description'\n            ></Form.Control>\n          </FormGroup>\n\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            UPDATE\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default EditProduct;\n","/home/kagorora/Documents/dms-f/src/components/admin/Orders.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"172","replacedBy":"176"},{"ruleId":"174","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":12,"column":9,"nodeType":"180","endLine":12,"endColumn":37},{"ruleId":"181","severity":1,"message":"182","line":22,"column":10,"nodeType":"183","messageId":"184","endLine":22,"endColumn":17},{"ruleId":"172","replacedBy":"185"},{"ruleId":"174","replacedBy":"186"},{"ruleId":"172","replacedBy":"187"},{"ruleId":"174","replacedBy":"188"},{"ruleId":"172","replacedBy":"189"},{"ruleId":"174","replacedBy":"190"},{"ruleId":"178","severity":1,"message":"191","line":48,"column":6,"nodeType":"192","endLine":48,"endColumn":24,"suggestions":"193"},{"ruleId":"178","severity":1,"message":"194","line":16,"column":9,"nodeType":"180","endLine":16,"endColumn":37},{"ruleId":"178","severity":1,"message":"195","line":54,"column":6,"nodeType":"192","endLine":54,"endColumn":24,"suggestions":"196"},{"ruleId":"172","replacedBy":"197"},{"ruleId":"174","replacedBy":"198"},{"ruleId":"178","severity":1,"message":"199","line":44,"column":6,"nodeType":"192","endLine":44,"endColumn":65,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"201","line":21,"column":9,"nodeType":"180","endLine":21,"endColumn":37},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],["202"],["203"],"react-hooks/exhaustive-deps","The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 49) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","VariableDeclarator","no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar",["202"],["203"],["202"],["203"],["202"],["203"],"React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["204"],"The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 45) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderId'. Either include them or remove the dependency array.",["205"],["202"],["203"],"React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array.",["206"],"The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 59) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [history, order._id, success]",{"range":"213","text":"214"},"Update the dependencies array to be: [dispatch, orderId, successDelivered]",{"range":"215","text":"216"},"Update the dependencies array to be: [dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]",{"range":"217","text":"218"},[1360,1378],"[history, order._id, success]",[1613,1631],"[dispatch, orderId, successDelivered]",[1392,1451],"[dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]"]
[{"/Users/maxim/Documents/ECMS/dms-f/src/store/types/types.js":"1","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/cartsActions.js":"2","/Users/maxim/Documents/ECMS/dms-f/src/components/paymentMethod/PaymentMethod.js":"3","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Header/Header.js":"4","/Users/maxim/Documents/ECMS/dms-f/src/components/order/Order.js":"5","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Orders.js":"6","/Users/maxim/Documents/ECMS/dms-f/src/App.js":"7","/Users/maxim/Documents/ECMS/dms-f/src/components/profile/Profile.js":"8","/Users/maxim/Documents/ECMS/dms-f/src/components/shipping/Shipping.js":"9","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/EditProduct.js":"10","/Users/maxim/Documents/ECMS/dms-f/src/components/buyer/Buyer.js":"11","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/FormContainer.js":"12","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/usersActions.js":"13","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Product/Product.js":"14","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/EditUser.js":"15","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/orderActions.js":"16","/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/orderReducers.js":"17","/Users/maxim/Documents/ECMS/dms-f/src/store.js":"18","/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/userReducers.js":"19","/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/productReducers.js":"20","/Users/maxim/Documents/ECMS/dms-f/src/index.js":"21","/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/cartReducers.js":"22","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Products.js":"23","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Users.js":"24","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Footer/Footer.js":"25","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Message.js":"26","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js":"27","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/exportCvs.js":"28","/Users/maxim/Documents/ECMS/dms-f/src/components/login/Login.js":"29","/Users/maxim/Documents/ECMS/dms-f/src/components/myOrders/MyOrders.js":"30","/Users/maxim/Documents/ECMS/dms-f/src/components/placeOrder/PlaceOrder.js":"31","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/SearchBox/SearchBox.js":"32","/Users/maxim/Documents/ECMS/dms-f/src/components/cart/Cart.js":"33","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/productsActions.js":"34","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Rating/Rating.js":"35","/Users/maxim/Documents/ECMS/dms-f/src/components/productDetails/ProductDetails.js":"36","/Users/maxim/Documents/ECMS/dms-f/src/components/register/Register.js":"37","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Loans.js":"38","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Loader.js":"39"},{"size":6695,"mtime":1619285446465,"results":"40","hashOfConfig":"41"},{"size":1238,"mtime":1618669882834,"results":"42","hashOfConfig":"41"},{"size":1764,"mtime":1619286959850,"results":"43","hashOfConfig":"41"},{"size":3752,"mtime":1619246459031,"results":"44","hashOfConfig":"41"},{"size":8497,"mtime":1618730542194,"results":"45","hashOfConfig":"41"},{"size":13997,"mtime":1619043327120,"results":"46","hashOfConfig":"41"},{"size":2496,"mtime":1619246581858,"results":"47","hashOfConfig":"41"},{"size":4984,"mtime":1618662468614,"results":"48","hashOfConfig":"41"},{"size":4346,"mtime":1618730542195,"results":"49","hashOfConfig":"41"},{"size":5874,"mtime":1618662468611,"results":"50","hashOfConfig":"41"},{"size":1068,"mtime":1618662468612,"results":"51","hashOfConfig":"41"},{"size":336,"mtime":1618662468615,"results":"52","hashOfConfig":"41"},{"size":6293,"mtime":1618662468617,"results":"53","hashOfConfig":"41"},{"size":917,"mtime":1618662468616,"results":"54","hashOfConfig":"41"},{"size":4408,"mtime":1618681429185,"results":"55","hashOfConfig":"41"},{"size":10756,"mtime":1619285167963,"results":"56","hashOfConfig":"41"},{"size":7829,"mtime":1619285882294,"results":"57","hashOfConfig":"41"},{"size":3019,"mtime":1619285590406,"results":"58","hashOfConfig":"41"},{"size":3491,"mtime":1618662468618,"results":"59","hashOfConfig":"41"},{"size":3173,"mtime":1618662468618,"results":"60","hashOfConfig":"41"},{"size":319,"mtime":1618662468617,"results":"61","hashOfConfig":"41"},{"size":1303,"mtime":1618669882834,"results":"62","hashOfConfig":"41"},{"size":4237,"mtime":1618730542193,"results":"63","hashOfConfig":"41"},{"size":3376,"mtime":1618662468612,"results":"64","hashOfConfig":"41"},{"size":330,"mtime":1619032311093,"results":"65","hashOfConfig":"41"},{"size":244,"mtime":1618662468615,"results":"66","hashOfConfig":"41"},{"size":1263,"mtime":1618669882834,"results":"67","hashOfConfig":"41"},{"size":1498,"mtime":1618809633097,"results":"68","hashOfConfig":"41"},{"size":2235,"mtime":1618662468613,"results":"69","hashOfConfig":"41"},{"size":3059,"mtime":1618730542193,"results":"70","hashOfConfig":"41"},{"size":5163,"mtime":1618665608546,"results":"71","hashOfConfig":"41"},{"size":776,"mtime":1618662468616,"results":"72","hashOfConfig":"41"},{"size":3597,"mtime":1618662468613,"results":"73","hashOfConfig":"41"},{"size":4333,"mtime":1618662468617,"results":"74","hashOfConfig":"41"},{"size":1541,"mtime":1618662468616,"results":"75","hashOfConfig":"41"},{"size":7685,"mtime":1618662468614,"results":"76","hashOfConfig":"41"},{"size":4653,"mtime":1618662468614,"results":"77","hashOfConfig":"41"},{"size":5459,"mtime":1619286335573,"results":"78","hashOfConfig":"41"},{"size":379,"mtime":1618662468615,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pr9sao",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"89"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"89"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maxim/Documents/ECMS/dms-f/src/store/types/types.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store/actions/cartsActions.js",[],["176","177"],"/Users/maxim/Documents/ECMS/dms-f/src/components/paymentMethod/PaymentMethod.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Header/Header.js",[],["178","179"],"/Users/maxim/Documents/ECMS/dms-f/src/components/order/Order.js",["180","181"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport {\n  getOrderDetails,\n  payOrder,\n  markOrderAsDelivered,\n} from \"../../store/actions/orderActions.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport { ORDER_PAY_RESET } from \"../../store/types/types\";\n\nconst Order = ({ match, history }) => {\n  const orderId = match.params.id;\n\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, loading, error } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { success: successPay, loading: loadingPay } = orderPay;\n\n  const deliverOrder = useSelector((state) => state.deliverOrder);\n  const {\n    success: successDelivered,\n    loading: loadingDelivered,\n    error: errorDelivered,\n  } = deliverOrder;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  if (!loading) {\n    // Calculate prices\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    }\n  }, [userInfo, history]);\n\n  useEffect(() => {\n    if (successDelivered) {\n      dispatch(getOrderDetails(orderId));\n    }\n  }, [successDelivered]);\n\n  useEffect(() => {\n    if(orderDetails.paymentMethod === 'LOAN'){\n      orderDetails.order.isLoan(true)\n    }\n  }, [orderDetails])\n\n  useEffect(() => {\n    if (order && orderId !== order._id) {\n      dispatch(getOrderDetails(orderId));\n    } else {\n      const addPayPalScript = async () => {\n        const { data: clientId } = await axios.get(\"/api/config/paypal\");\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n        script.async = true;\n        script.onload = () => {\n          setSdkReady(true);\n        };\n        document.body.appendChild(script);\n      };\n\n      if (!order || successPay) {\n        dispatch({ type: ORDER_PAY_RESET });\n        dispatch(getOrderDetails(orderId));\n      } else if (!order.isPaid) {\n        if (!window.paypal) {\n          addPayPalScript();\n        } else {\n          setSdkReady(true);\n        }\n      }\n    }\n  }, [dispatch, orderId, successPay, order]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  const deliverHandler = () => {\n    dispatch(markOrderAsDelivered(orderId));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : loadingDelivered ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : errorDelivered ? (\n    <Message variant='danger'>{errorDelivered}</Message>\n  ) : (\n    <>\n    { orderDetails.order.paymentMethod == 'LOAN' && userInfo.userType !== 'admin' && (\n      <Message variant='success'>Loan successfuly made</Message>\n    )\n    }\n      <>\n        <Row>\n          <Col md={8}>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Destination</h2>\n                <p>\n                  <strong>Name: </strong>\n                  {order.user.name}\n                </p>\n                <p>\n                  <strong>Email: </strong>\n                  <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n                </p>\n                <p>\n                  <strong>Address: </strong>\n                  {order.orderAddress.Province}, {order.orderAddress.District},{\" \"}\n                  {order.orderAddress.Sector}, {order.orderAddress.cell},{\" \"}\n                  {order.orderAddress.city}, {order.orderAddress.streetNumber}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isDelivered ? (\n                <Message variant='danger'>Not Delivered</Message>\n              ) : (\n                <Message variant='success'>\n                  delivered on {order.deliveredAt}\n                </Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Payment Method</h2>\n                <p>\n                  <strong>Method: </strong>\n                  {order.paymentMethod}\n                </p>\n              </ListGroup.Item>\n\n              {!order.isPaid ? (\n                <Message variant='danger'>Not Paid</Message>\n              ) : (\n                <Message variant='success'>Paid on {order.paidAt}</Message>\n              )}\n\n              <ListGroup.Item>\n                <h2>Order Items</h2>\n                {order.orderItems.length === 0 ? (\n                  <Message>Order is Empty</Message>\n                ) : (\n                  <ListGroup variant='flush'>\n                    {order.orderItems.map((item, index) => (\n                      <ListGroup.Item key={index}>\n                        <Row>\n                          <Col md={1}>\n                            <Image\n                              src={item.image}\n                              alt={item.name}\n                              fluid\n                              rounded\n                            />\n                          </Col>\n                          <Col>\n                            <Link to={`/product/${item.product}`}>\n                              {item.name}\n                            </Link>\n                          </Col>\n                          <Col md={4}>\n                            {item.qty} * {item.price} = FRW\n                            {item.qty * item.price}\n                          </Col>\n                        </Row>\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                )}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n\n          <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n            <Card>\n              <ListGroup variant='flush'>\n                <ListGroup.Item>\n                  <h2>Order Summary</h2>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Items</Col>\n                    <Col>FRW {order.itemsPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Transport</Col>\n                    <Col>FRW {order.deliveryPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax</Col>\n                    <Col>FRW {order.taxPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total Amount</Col>\n                    <Col>FRW {order.totalPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n                \n                {!order.isPaid && orderDetails.order.paymentMethod !== 'LOAN' && userInfo.userType !== 'admin' && (\n                  <ListGroup.Item>\n                    {loadingPay && <Loader />}\n                    {!sdkReady ? (\n                      <Loader />\n                    ) : (\n                      <PayPalButton\n                        amount={order.totalPrice}\n                        onSuccess={successPaymentHandler}\n                      />\n                    )}\n                  </ListGroup.Item>\n                )}\n                {!successDelivered &&\n                  userInfo &&\n                  userInfo.userType === \"admin\" &&\n                  order.isPaid &&\n                  !order.isDelivered && (\n                    <ListGroup.Item>\n                      <Button\n                        type='button'\n                        className='btn btn-block rounded'\n                        onClick={deliverHandler}\n                      >\n                        Mark as Delivered\n                      </Button>\n                    </ListGroup.Item>\n                  )}\n              </ListGroup>\n            </Card>\n          </Col>\n        </Row>\n      </>\n    </>\n  );\n};\n\nexport default Order;\n","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Orders.js",["182","183","184","185","186","187"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Row, Col, Table, Form, FormGroup } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport { listOrders, filterOrdersByDate, filterOrdersPaymentMethod, filterOrdersIsPaid, filterOrdersProvince } from \"../../store/actions/orderActions\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { ExportCSV } from \"./exportCvs\";\nimport Logo from '../../assets/images/mainlogo.png';\n\n\nconst printOrdersReport = (title) => {\n  var myWindow = window.open(\"\", \"PRINT\", \"height=1000,width=1500\");\n  // Prepare the document body\n  // Hacks hacks hacks\n  document.getElementById(\"table-orders-form\").hidden = true;\n  document.getElementById(\"table-title\").hidden = true;\n  document.getElementById(\"details-col-header\").hidden = true;\n  document.getElementsByClassName(\"navbar\")[0].hidden = true;\n  document.getElementById(\"footer-element\").hidden = true;\n  Array.from(document.getElementsByClassName(\"details-row-item\")).forEach(\n    (element) => { element.hidden = true; }\n  );\n  myWindow.document.head.innerHTML = document.head.innerHTML;\n  myWindow.document.body.innerHTML = `\n  <div style=\"margin-left:45px;\">\n    <h3 style=\"text-align: center;\">Trust Plus Company LTD</h3>\n    <img src=${Logo} alt=\"logo\" style=\"height:80px; width: 160px; margin-bottom:20px\"/>\n    <ul style=\"list-style: none\">\n    <li>Trust Plus Company LTD</li>\n    <li>Tel: 0785832353</li>\n    <li>Email: trustplus@gmail.com</li>\n    </ul>\n    <h1 style=\"text-align: center; text-decoration: underline;\"> ${title || \"Retrieved Orders Report\"}</h1>\n    <div>\n      <h4>From: ${document.getElementById(\"from-date\").value || \"oldest\"}</h4>\n      <h4>To: ${document.getElementById(\"to-date\").value ||\n    new Date().toISOString().split(\"T\").join(\" \").slice(0, -5)\n    }</h4>\n    </div>\n  </div>\n  ${document.body.innerHTML}\n  <div style=\"margin-left:45px;\">\n  <h4>Date retrieved: ${new Date().toISOString().split(\"T\").join(\" \").slice(0, -5)}  Location: .......................</h4>\n  <h4>Approved By: ....................................</h4>\n  <h4>Signature & Stamp:....................................</h4>\n  </div>\n  \n  `;\n  // myWindow.document.body.getElementById(\"\") = document.getElementById(\"orders-table\").innerHTML;\n\n  myWindow.document.close(); // necessary for IE >= 10\n  myWindow.focus(); // necessary for IE >= 10*/\n\n  myWindow.print();\n  document.getElementById(\"table-orders-form\").hidden = false;\n  document.getElementById(\"table-title\").hidden = false;\n  document.getElementsByClassName(\"navbar\")[0].hidden = false;\n  document.getElementById(\"details-col-header\").hidden = false;\n  document.getElementById(\"footer-element\").hidden = false;\n  Array.from(document.getElementsByClassName(\"details-row-item\")).forEach(\n    (element) => {\n      element.hidden = false;\n    }\n  );\n  // alert(\"Close popup window\")\n  // myWindow.close();\n  return true;\n};\n\nconst Orders = ({ history }) => {\n\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n\n  const [paymentMethod, setPaymentMethod] = useState('');\n\n  const [list, setList] = useState([]);\n\n  const [isPaid, setIsPaid] = useState(Boolean);\n  const [isWeeklyReportLoaded, setIsWeeklyReportLoaded] = useState(Boolean);\n\n  const [Province, setProvince] = useState('');\n\n  const dispatch = useDispatch();\n\n  const adminOrder = useSelector((state) => state.adminOrder);\n  const { loading, error, orders } = adminOrder;\n\n\n  const orderFilterByDate = useSelector((state) => state.orderFilterByDate);\n  const { orders: filteredOrders, loading: filterLoader } = orderFilterByDate;\n\n  const orderFilterByPaymentMethod = useSelector((state) => state.orderFilterByPaymentMethod);\n  const { orders: OrdersfilteredByPaymentMethod } = orderFilterByPaymentMethod;\n\n  const orderFilterByIsPaid = useSelector((state) => state.orderFilterByIsPaid);\n  const { orders: OrdersfilteredByIsPaid } = orderFilterByIsPaid;\n\n  const orderFilterByProvince = useSelector((state) => state.orderFilterByProvince);\n  const { orders: OrdersfilteredByProvince } = orderFilterByProvince;\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  useEffect(() => {\n    if (orders) {\n      setList(orders);\n    }\n  }, [orders]);\n\n  const userLogin = useSelector((state) => state.userLogin);\n\n  let { userInfo } = userLogin;\n\n  useEffect(() => {\n    if (userInfo && userInfo.userType === \"admin\") {\n      dispatch(listOrders());\n    } else {\n      history.push(\"/login\");\n    }\n  }, [dispatch, history, userInfo]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (fromDate && toDate) {\n      dispatch(filterOrdersByDate(fromDate, toDate));\n    }\n  }\n\n  useEffect(() => {\n    if (filteredOrders) {\n      setList(filteredOrders);\n    }\n  }, [filteredOrders])\n\n  useEffect(() => {\n    dispatch(filterOrdersPaymentMethod(paymentMethod))\n  }, [paymentMethod])\n\n  useEffect(() => {\n    if (OrdersfilteredByPaymentMethod) {\n      setList(OrdersfilteredByPaymentMethod)\n    }\n  }, [OrdersfilteredByPaymentMethod])\n\n  useEffect(() => {\n    if (isPaid) {\n      dispatch(filterOrdersIsPaid(isPaid))\n    }\n  }, [isPaid])\n\n  useEffect(() => {\n    if (OrdersfilteredByIsPaid) {\n      setList(OrdersfilteredByIsPaid)\n    }\n  }, [OrdersfilteredByIsPaid])\n\n  useEffect(() => {\n    if (Province) {\n      dispatch(filterOrdersProvince(Province))\n    }\n  }, [Province])\n\n\n  useEffect(() => {\n    if (OrdersfilteredByProvince) {\n      setList(OrdersfilteredByProvince)\n    }\n  }, [OrdersfilteredByProvince])\n\n\n  return (\n    <div className=\"justify-content-center\">\n      <Row>\n        <Col>\n          <h2 id=\"table-title\">All Orders</h2>\n\n          <Form\n            id=\"table-orders-form\"\n            onSubmit={submitHandler}\n            className=\"mt-3 mb-3\"\n          >\n     \n            <Row>\n   \n              <Col md={2}>\n                <FormGroup controlId=\"toDate\">\n                  <Form.Label>Payment Method</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={paymentMethod}\n                    onChange={(e) => setPaymentMethod(e.target.value)}\n                  >\n                    <option>LOAN</option>\n                    <option>PayPal</option>\n                  </Form.Control>\n                </FormGroup>\n              </Col>\n\n              <Col md={2}>\n                <FormGroup controlId=\"toDate\">\n                  <Form.Label>Paid Orders</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={isPaid}\n                    onChange={(e) => setIsPaid(e.target.value)}\n                  >\n                    <option value=\"true\">Paid</option>\n                    <option value=\"false\">Not Paid</option>\n                  </Form.Control>\n                </FormGroup>\n              </Col>\n\n              <Col md={2}>\n                <FormGroup controlId=\"toDate\">\n                  <Form.Label>Province</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={Province}\n                    onChange={(e) => setProvince(e.target.value)}\n                  >\n                    <option>Kigali</option>\n                    <option>North</option>\n                    <option>East</option>\n                    <option>West</option>\n                    <option>South</option>\n                  </Form.Control>\n                </FormGroup>\n              </Col>\n \n              <Col md={2}>\n                <Form.Group controlId=\"fromDate\">\n                  <Form.Label>From</Form.Label>\n                  <Form.Control\n                    id=\"from-date\"\n                    type=\"date\"\n                    value={fromDate}\n                    onChange={(e) => setFromDate(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n              </Col>\n\n              <Col md={2}>\n                <Form.Group controlId=\"toDate\">\n                  <Form.Label>To</Form.Label>\n                  <Form.Control\n                    id=\"to-date\"\n                    type=\"date\"\n                    value={toDate}\n                    onChange={(e) => setToDate(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n              </Col>\n              <Col md={2}>\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  className=\"btn mb-0 mt-4 rounded\"\n                  style={{ backgroundColor: \"#44bb86\", color: \"#ffffff\", textAlign: \"center\" }}\n                >\n                  Search\n                </Button>\n              </Col>\n\n            </Row>\n\n            <Row>\n              <Col>\n                <FormGroup controlId=\"toDate\">\n                  {list && list.length > 0 ? (\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      {/* <ExportCSV csvData={list} fileName={\"Report\"} /> */}\n                      <Button onClick={() => printOrdersReport()} className=\"rounded\">\n                        Print report\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          var todayTs = Date.now();\n                          var lastWeekAgoDayTs =\n                            todayTs - 7 * 24 * 60 * 60 * 1000;\n                          setFromDate(\n                            new Date(lastWeekAgoDayTs)\n                              .toISOString()\n                              .split(\"T\")[0]\n                          );\n                          setToDate(\n                            new Date(todayTs).toISOString().split(\"T\")[0]\n                          );\n                          submitHandler(new Event(\"click\"));\n                          // It's a hack :)\n                          setTimeout(() => setIsWeeklyReportLoaded(true), 3000);\n                        }}\n                        className=\"rounded\"\n                      >\n                        Retrieve weekly report\n                      </Button>\n                      {isWeeklyReportLoaded ? (\n                        <Button\n                          onClick={() => {\n                            printOrdersReport(\"Weekly Orders Report\");\n                          }}\n                          className=\"rounded\"\n                        >\n                          Print weekly report\n                        </Button>\n                      ) : null}\n                    </div>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </Col>\n            </Row>\n          </Form>\n\n          {loading || filterLoader ? (\n            <Loader />\n          ) : error ? (\n            <Message variant=\"danger\">{error}</Message>\n          ) : (\n            <Table\n              stripped\n              bordered\n              hover\n              responsive\n              className=\"table-sm\"\n              id=\"orders-table\"\n            >\n              <thead style={{ backgroundColor: \"#44bb86\", color: \"#ffffff\", textAlign: \"center\" }}>\n                <tr>\n                  <th>Payment Method</th>\n                  <th>User</th>\n                  <th>Total</th>\n                  <th>Payment Date</th>\n                  <th>Delivered Date</th>\n                  <th>Products</th>\n                  <th id=\"details-col-header\"></th>\n                </tr>\n              </thead>\n              <tbody style={{ textAlign: \"center\" }}>\n                {list.map((order) => (\n                  <tr key={order._id}>\n                    <td>\n                      <p>{order.paymentMethod}</p>\n                    </td>\n                    <td>\n                      <p>{order.user.name}</p>\n                    </td>\n                    <td>{new Intl.NumberFormat().format(order.totalPrice)} {'   '} FRW</td>\n                    <td>\n                      {order.isPaid ? (\n                        order.paidAt.substring(0, 10)\n                      ) : (\n                        <i\n                          className=\"fas fa-times fa-fw\"\n                          style={{ color: \"red\" }}\n                        ></i>\n                      )}\n                    </td>\n                    <td>\n                      {order.isDelivered ? (\n                        order.deliveredAt.substring(0, 10)\n                      ) : (\n                        <i\n                          className=\"fas fa-times fa-fw\"\n                          style={{ color: \"red\" }}\n                        ></i>\n                      )}\n                    </td>\n                    <td>\n                      {order.orderItems.length > 1\n                        ? order.orderItems.reduce((prevValue, orderItem) =>\n                          prevValue.name\n                              ? prevValue.name.length > 13 ? prevValue.name.substr(0, 13) : prevValue.name\n                              : prevValue.length > 13 ? prevValue.substr(0, 13) : prevValue + \"--\" + orderItem.name.length > 13 ? orderItem.name.substr(0, 13) : orderItem.name\n                          )\n                        : order.orderItems.length == 1\n                          ? order.orderItems[0].name.length > 13 ? order.orderItems[0].name.substr(0, 13) : order.orderItems[0].name\n                          : \"N/A\"}\n                    </td>\n                    <td className=\"details-row-item\">\n                      <LinkContainer to={`/order/${order._id}`}>\n                        <Button variant=\"dark\" className=\"btn-sm rounded\">\n                          Details\n                        </Button>\n                      </LinkContainer>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Orders;\n",["188","189"],"/Users/maxim/Documents/ECMS/dms-f/src/App.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/profile/Profile.js",["190","191"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getUserProfile,\n  UpdateUserProfile,\n} from \"../../store/actions/usersActions.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport FormContainer from '../reusable/FormContainer.js';\n\nconst Profile = ({ history }) => {\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { user, loading, error } = userProfile;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userProfileReset = useSelector((state) => state.userProfileReset);\n  const { success } = userProfileReset;\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      if (!user.name) {\n        dispatch(getUserProfile(\"profile\"));\n      } else {\n        setName(user.name);\n        setPhoneNumber(user.phoneNumber);\n        setNationalId(user.nationalId);\n        setEmail(user.email);\n        setAddress(user.address);\n        setUserType(user.userType);\n        setMessage(user.message);\n      }\n    }\n  }, [dispatch, history, userInfo, user]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password && confirmPassword && password !== confirmPassword) {\n      setMessage(\"passwords are not matching!, try again\");\n    } else {\n      dispatch(\n        UpdateUserProfile({\n          id: user._id,\n          name,\n          phoneNumber,\n          nationalId,\n          email,\n          address,\n          userType,\n        })\n      );\n    }\n  };\n\n  return (\n    <FormContainer>\n      {/* <Col md={8}> */}\n        <h2>User Profile</h2>\n        {loading && <Loader />}\n        {error && <Message variant='danger'>{error}</Message>}\n        {success && <Message variant='success'>{\"Profile Updated\"}</Message>}\n        <Form onSubmit={handleSubmit}>\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setAddress(e.target.value)}\n              value={address}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n              disabled='disabled'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setPassword(e.target.value)}\n              value={password}\n              placeholder='enter password'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>comfirm password</Form.Label>\n            <Form.Control\n              type='password'\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              value={confirmPassword}\n              placeholder='confirm password'\n            ></Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            Update\n          </Button>\n        </Form>\n      {/* </Col> */}\n    </FormContainer>\n  );\n};\n\nexport default Profile;\n","/Users/maxim/Documents/ECMS/dms-f/src/components/shipping/Shipping.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/admin/EditProduct.js",["192","193","194"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FormContainer from \"../reusable/FormContainer.js\";\nimport {\n  listProductDetails,\n  updateProduct,\n} from \"../../store/actions/productsActions.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport {\n  UPDATE_PRODUCT_RESET,\n  CREATE_PRODUCT_RESET,\n  PRODUCT_DETAILS_RESET,\n} from \"../../store/types/types.js\";\n\nconst EditProduct = ({ match, history }) => {\n  const productId = match.params.id;\n\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [countInStock, setCountInStock] = useState(0);\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n\n  const [uploading, setUploading] = useState(false);\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n\n  const productUpdate = useSelector((state) => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch(listProductDetails(productId));\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setCountInStock(product.countInStock);\n        setImage(product.image);\n        setDescription(product.description);\n        setBrand(product.brand);\n        setCategory(product.category);\n      }\n    }\n  }, [dispatch, history, product, productId, successUpdate]);\n\n  const goBackHandler = () => {\n    dispatch({ type: UPDATE_PRODUCT_RESET });\n    dispatch({ type: CREATE_PRODUCT_RESET });\n    dispatch({ type: PRODUCT_DETAILS_RESET });\n    history.push(\"/admin/products\");\n  };\n\n  const handleImageUpload = async (e) => {\n    const { files } = e.target;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'miv0xetk');\n\n    const res = await fetch(\n      'https://api.cloudinary.com/v1_1/kagororacloud/image/upload',\n      {\n        method: 'POST',\n        body: data,\n      }\n    );\n\n    const file = await res.json();\n    setImage(file.secure_url);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        countInStock,\n        image,\n        description,\n        brand,\n        category,\n      })\n    );\n  };\n\n  return (\n    <>\n      <Button onClick={goBackHandler} className='rounded'>\n        <i className='fas fa-chevron-left fa-fw'></i> Go Back\n      </Button>\n      <FormContainer>\n        <h1>UPDATE PRODUCT</h1>\n        {loading ? (\n          <Loader />\n        ) : loadingUpdate ? (\n          <Loader />\n        ) : (\n          error && <Message variant='danger'>{error}</Message>\n        )}\n\n        <Form onSubmit={handleSubmit}>\n          {successUpdate && (\n            <Message variant='success'>Product Updated</Message>\n          )}\n          {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>PRICE / FRW</Form.Label>\n            <Form.Control\n              onChange={(e) => setPrice(e.target.value)}\n              value={price}\n              placeholder='enter PRICE'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              onChange={(e) => setImage(e.target.value)}\n              value={image}\n              placeholder='enter Image'\n            ></Form.Control>\n            <Form.File\n              id='image-file'\n              label='Upload Image'\n              custom\n              onChange={handleImageUpload}\n            >\n              {uploading && <Loader />}\n            </Form.File>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>Brand</Form.Label>\n            <Form.Control\n              onChange={(e) => setBrand(e.target.value)}\n              value={brand}\n              placeholder='enter Brand'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>countInStock</Form.Label>\n            <Form.Control\n              onChange={(e) => setCountInStock(e.target.value)}\n              value={countInStock}\n              placeholder='enter countInStock'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>category</Form.Label>\n            <Form.Control\n              onChange={(e) => setCategory(e.target.value)}\n              value={category}\n              placeholder='enter category'\n            ></Form.Control>\n          </FormGroup>\n\n          <FormGroup>\n            <Form.Label>description</Form.Label>\n            <Form.Control\n              as='textarea'\n              row='3'\n              onChange={(e) => setDescription(e.target.value)}\n              value={description}\n              placeholder='enter description'\n            ></Form.Control>\n          </FormGroup>\n\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            UPDATE\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default EditProduct;","/Users/maxim/Documents/ECMS/dms-f/src/components/buyer/Buyer.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/FormContainer.js",[],["195","196"],"/Users/maxim/Documents/ECMS/dms-f/src/store/actions/usersActions.js",[],["197","198"],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Product/Product.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/admin/EditUser.js",["199"],"import React, { useEffect, useState } from \"react\";\nimport { FormGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FormContainer from \"../reusable/FormContainer.js\";\nimport { getUserProfile, editUser } from \"../../store/actions/usersActions.js\";\nimport {\n  ADMIN_UPDATE_USER_RESET,\n  USER_PROFILE_RESET,\n} from \"../../store/types/types.js\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\n\nconst EditUserInfo = ({ match, history }) => {\n  const userId = match.params.id;\n\n  const dispatch = new useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [nationalId, setNationalId] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [message] = useState(\"\");\n\n  const userProfile = useSelector((state) => state.userProfile);\n  const { loading, error, user } = userProfile;\n\n  const updateUser = useSelector((state) => state.updateUser);\n  const { success: successUpdate } = updateUser;\n\n  useEffect(() => {\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserProfile(userId));\n    } else {\n      setName(user.name);\n      setPhoneNumber(user.phoneNumber);\n      setNationalId(user.nationalId);\n      setEmail(user.email);\n      setLocation(user.location);\n      setUserType(user.userType);\n    }\n  }, [dispatch, history, user, userId, successUpdate]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      editUser({\n        _id: userId,\n        name,\n        phoneNumber,\n        nationalId,\n        email,\n        location,\n        userType,\n        message,\n      })\n    );\n  };\n\n  const resetUserResultHanlder = () => {\n    dispatch({ type: USER_PROFILE_RESET });\n    dispatch({ type: ADMIN_UPDATE_USER_RESET });\n    history.push(\"/admin/users\");\n  };\n\n  return (\n    <>\n      <Button onClick={resetUserResultHanlder} className='rounded'>\n        <i className='fas fa-chevron-left fa-fw'></i> Go Back\n      </Button>\n      <FormContainer>\n        <h1>UPDATE USER</h1>\n        {loading ? (\n          <Loader />\n        ) : (\n          error && <Message variant='danger'>{error}</Message>\n        )}\n\n        <Form onSubmit={handleSubmit}>\n          {successUpdate && <Message variant='success'>User Updated</Message>}\n          <FormGroup>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              placeholder='enter name'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n              onChange={(e) => setPhoneNumber(e.target.value)}\n              value={phoneNumber}\n              placeholder='enter Phone Number'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>nationalId</Form.Label>\n            <Form.Control\n              onChange={(e) => setNationalId(e.target.value)}\n              value={nationalId}\n              placeholder='enter NationalId'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type='email'\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              placeholder='enter email'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>location</Form.Label>\n            <Form.Control\n              onChange={(e) => setLocation(e.target.value)}\n              value={location}\n              placeholder='enter Location'\n            ></Form.Control>\n          </FormGroup>\n          <FormGroup>\n            <Form.Label>user Type</Form.Label>\n            <Form.Control\n              as='select'\n              value={userType}\n              onChange={(e) => setUserType(e.target.value)}\n            >\n              <option>buyer</option>\n              <option>seller</option>\n            </Form.Control>\n          </FormGroup>\n          <Button type='submit' variant='primary' className='btn-block rounded'>\n            UPDATE\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default EditUserInfo;\n","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/orderActions.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/orderReducers.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/userReducers.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/productReducers.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/index.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/store/reducers/cartReducers.js",[],["200","201"],"/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Products.js",["202"],"import React, { useEffect } from \"react\";\nimport { Button, Row, Col, Table } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Message from \"../reusable/Message.js\";\nimport Loader from \"../reusable/Loader.js\";\nimport {\n  listProducts,\n  deleteProduct,\n  createProduct,\n} from \"../../store/actions/productsActions\";\nimport { CREATE_PRODUCT_RESET } from \"../../store/types/types.js\";\n\nconst Products = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const productCreate = useSelector((state) => state.productCreate);\n  const {\n    success: successCreate,\n    loading: loadingCreate,\n    error: errorCreate,\n    product: createdProduct,\n  } = productCreate;\n\n  const productsList = useSelector((state) => state.productsList);\n  const { products, loading, error } = productsList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const productDelete = useSelector((state) => state.productDelete);\n  const { success: successDelete } = productDelete;\n\n  useEffect(() => {\n    dispatch({ type: CREATE_PRODUCT_RESET });\n    if (userInfo && userInfo.userType === \"seller\") {\n      history.push(\"/login\");\n    }\n    if (!userInfo) {\n      history.push(\"/login\");\n    }\n    if (successCreate) {\n      history.push(`/product/${createdProduct._id}/edit`);\n    } else {\n      dispatch(listProducts());\n    }\n  }, [dispatch, userInfo, history, successDelete, successCreate]);\n\n  const deleteHandler = (id) => {\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deleteProduct(id));\n    }\n  };\n\n  const createProductHandler = () => {\n    dispatch(createProduct());\n  };\n\n  return (\n    <div className='justify-content-center'>\n      <Row>\n        <Col>\n          {loading ? (\n            <Loader />\n          ) : loadingCreate ? (\n            <Loader />\n          ) : error ? (\n            <Message variant='danger'>{error}</Message>\n          ) : errorCreate ? (\n            <Message variant='danger'>{errorCreate}</Message>\n          ) : (\n            <>\n              <Row className='align-items-center'>\n                <Col>\n                  <h2>Products</h2>\n                </Col>\n                <Col className='text-right'>\n                  <Button\n                    className='my-3 rounded'\n                    onClick={createProductHandler}\n                  >\n                    <i className='fas fa-plus-circle fa-fw'></i> Add Products\n                  </Button>\n                </Col>\n              </Row>\n              <Table striped bordered hover responsive className='table-sm'>\n                <thead>\n                  <tr>\n                    <th>Id</th>\n                    <th>Name</th>\n                    <th>Price</th>\n                    <th>Category</th>\n                    <th>Brand</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {products.map((product) => (\n                    <tr key={product._id}>\n                      <td>{product._id}</td>\n                      <td>\n                        <a href={`product/${product.name}`}>{product.name}</a>\n                      </td>\n                      <td>{product.price}</td>\n                      <td>{product.category}</td>\n                      <td>{product.brand}</td>\n                      <td>\n                        <LinkContainer to={`/product/${product._id}/edit`}>\n                          <Button variant='light' className='btn-sm'>\n                            <i className='fas fa-edit fa-fw'></i>\n                          </Button>\n                        </LinkContainer>\n                        <Button\n                          variant='danger'\n                          className='btn-sm'\n                          onClick={() => deleteHandler(product._id)}\n                        >\n                          <i className='fas fa-trash fa-fw'></i>\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Products;\n","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Users.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Footer/Footer.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Message.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/CheckoutSteps/CheckoutSteps.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/admin/exportCvs.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/login/Login.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/myOrders/MyOrders.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/placeOrder/PlaceOrder.js",["203"],"import React, { useEffect } from \"react\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"../reusable/Message.js\";\nimport CheckoutSteps from \"../reusable/CheckoutSteps/CheckoutSteps.js\";\nimport { createOrder } from \"../../store/actions/orderActions.js\";\n\nconst PlaceOrder = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress, paymentMethod, cartItems } = cart;\n  const {\n    Province,\n    District,\n    Sector,\n    cell,\n    city,\n    streetNumber,\n  } = shippingAddress;\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  const itemsPrice = addDecimals(\n    cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  const shippingPrice = addDecimals(itemsPrice > 100 ? 0 : 100);\n\n  const taxPrice = addDecimals(Number((0.15 * itemsPrice).toFixed(2)));\n\n  const totalPrice = (\n    Number(itemsPrice) +\n    Number(shippingPrice) +\n    Number(taxPrice)\n  ).toFixed(2);\n\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, success, error } = orderCreate;\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n    }\n  }, [history, success]);\n\n  const placeOrderHandler = () => {\n    dispatch(\n      createOrder({\n        orderItems: cartItems,\n        orderAddress: shippingAddress,\n        paymentMethod: paymentMethod,\n        itemsPrice: itemsPrice,\n        shippingPrice: shippingPrice,\n        taxPrice: taxPrice,\n        totalPrice: totalPrice,\n      })\n    );\n  };\n\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Destination</h2>\n              <p>\n                <strong>Address: </strong>\n                {Province}, {District}, {Sector}, {cell}, {city}, {streetNumber}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {paymentMethod}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cartItems.length === 0 ? (\n                <Message>Your cart is Empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} * {item.price} = FRW\n                          `${addDecimals(item.qty * item.price)}`\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4} className='justify-content-center ml-0.5 mt-5'>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>FRW {itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Transport</Col>\n                  <Col>FRW {shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>FRW {taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total Amount</Col>\n                  <Col>FRW {totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {error && (\n                <ListGroup.Item>\n                  <Message variant='danger'>{error}</Message>\n                </ListGroup.Item>\n              )}\n              <ListGroup.Item>\n                <Button\n                  type='button'\n                  className='btn-block'\n                  disabled={cartItems.length === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceOrder;\n","/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/SearchBox/SearchBox.js",["204"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nconst SearchBox = ({ history }) => {\n  const [keyword, setKeyword] = useState(\"\");\n\n  const submitHandler = (e) => {    \n    e.preventDefault();\n    if (keyword.trim()) {\n      history.push(`/search/${keyword}`);\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <Form onSubmit={submitHandler} inline>\n      <Form.Control\n        type=\"text\"\n        name=\"q\"\n        onChange={(e) => setKeyword(e.target.value)}\n        placeholder=\"Search Products...\"\n        className=\"mr-sm-2 ml-sm-5\"\n      ></Form.Control>\n      <Button type=\"submit\" variant=\"outline-success\" className=\"p-2\">\n        Search\n      </Button>\n    </Form>\n  );\n};\n\nexport default SearchBox;",["205","206"],"/Users/maxim/Documents/ECMS/dms-f/src/components/cart/Cart.js",["207"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Row,\n  Col,\n  Image,\n  Form,\n  ListGroup,\n  Button,\n  Card,\n} from \"react-bootstrap\";\nimport { addToCart, removeFromCart } from \"../../store/actions/cartsActions\";\nimport Message from \"../reusable/Message.js\";\nimport { Link } from \"react-router-dom\";\n\nconst Cart = ({ match, location, history }) => {\n  const productId = match.params.id;\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n\n  const { cartItems } = cart;\n\n  useEffect(() => {\n    if (productId) {\n      dispatch(addToCart(productId, qty));\n    }\n  }, [dispatch, productId, qty]);\n\n  const checkoutHandler = () => {\n    history.push(`/login?redirect=shipping`);\n  };\n\n  const removeItemHandler = (id) => {\n    dispatch(removeFromCart(id));\n  };\n\n  return (\n    <Row>\n      <Col md={8}>\n        <h1>Shopping Cart</h1>\n        {cartItems.length === 0 ? (\n          <Message>Shopping Cart Empty</Message>\n        ) : (\n          <ListGroup variant='flush'>\n            {cartItems.map((item) => (\n              <ListGroup.Item key={item.product}>\n                <Row>\n                  <Col md={2}>\n                    <Image\n                      src={item.image}\n                      alt={item.name}\n                      fluid\n                      rounded\n                    ></Image>\n                  </Col>\n                  <Col md={3}>\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                  </Col>\n                  <Col md={2}>FRW {item.price}</Col>\n                  <Col md={3}>\n                    <Form.Control\n                      as='select'\n                      value={item.qty}\n                      onChange={(e) =>\n                        dispatch(\n                          addToCart(item.product, Number(e.target.value))\n                        )\n                      }\n                    >\n                      {[...Array(item.countInStock).keys()].map((index) => (\n                        <option key={index + 1} value={index + 1}>\n                          {index + 1}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Col>\n                  <Col md={2}>\n                    <Button\n                      variant='light'\n                      onClick={() => removeItemHandler(item.product)}\n                    >\n                      <i className='fas fa-trash fa-fw'></i>\n                    </Button>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </Col>\n      <Col md={4}>\n        <Card>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>\n                Total Items:{\" \"}\n                {cartItems.reduce((acc, item) => acc + item.qty, 0)}\n              </h2>\n              $\n              {cartItems\n                .reduce((acc, item) => acc + item.qty * item.price, 0)\n                .toFixed(2)}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Button\n                type='button'\n                className='btn-block rounded'\n                onClick={checkoutHandler}\n                disabled={cartItems.length == 0}\n              >\n                Proceed to Checkout\n              </Button>\n            </ListGroup.Item>\n          </ListGroup>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Cart;\n","/Users/maxim/Documents/ECMS/dms-f/src/store/actions/productsActions.js",[],["208","209"],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Rating/Rating.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/productDetails/ProductDetails.js",[],"/Users/maxim/Documents/ECMS/dms-f/src/components/register/Register.js",["210","211"],"import React, { useEffect, useState } from 'react';\nimport { FormGroup, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport FormContainer from '../reusable/FormContainer.js';\nimport { register } from '../../store/actions/usersActions.js'\nimport Message from '../reusable/Message.js';\nimport Loader from '../reusable/Loader.js';\n\nconst Register = ({ history, location }) => {\n\n    const dispatch = new useDispatch();\n\n    const [name, setName] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [email, setEmail] = useState('');\n    const [nationalId, setNationalId] = useState('');\n    const [address, setAddress] = useState('');\n    const [userType, setUserType] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n\n    const userRegister = useSelector(state => state.userRegister)\n\n    const { userInfo, loading, error } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect);\n        }\n    }, [history, userInfo, redirect]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            setMessage('passwords are not matching!, try again');\n        }\n        dispatch(register(name, phoneNumber, nationalId, email, userType, password))\n    }\n\n    return (\n        <FormContainer >\n            <h1>SIGN UP</h1>\n            { loading && <Loader />}\n            {error && <Message variant='danger'>{error}</Message>}\n            {message && <Message variant='danger'>{message}</Message>}\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control onChange={(e) => setName(e.target.value)} value={name} placeholder='enter name'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>Phone Number</Form.Label>\n                    <Form.Control onChange={(e) => setPhoneNumber(e.target.value)} value={phoneNumber} placeholder='enter Phone Number'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>nationalId</Form.Label>\n                    <Form.Control onChange={(e) => setNationalId(e.target.value)} value={nationalId} placeholder='enter NationalId'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label >email</Form.Label>\n                    <Form.Control type='email' onChange={(e) => setEmail(e.target.value)} value={email} placeholder='enter email'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>user Type</Form.Label>\n                    <Form.Control\n                        as='select'\n                        value={userType}\n                        onChange={(e) =>\n                            setUserType(e.target.value)\n                        }\n                    >\n                         <option selected value=\"\">Select User Type</option>\n                        <option>\n                            buyer\n                        </option>\n                        <option>\n                            seller\n                        </option>\n                    </Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label>password</Form.Label>\n                    <Form.Control type='password' onChange={(e) => setPassword(e.target.value)} value={password} placeholder='enter password'></Form.Control>\n                </FormGroup>\n                <FormGroup>\n                    <Form.Label >comfirm password</Form.Label>\n                    <Form.Control type='password' onChange={(e) => setConfirmPassword(e.target.value)} value={confirmPassword} placeholder='confirm password'></Form.Control>\n                </FormGroup>\n                <Button type='submit' variant='primary' className='btn-block rounded'>SIGN UP</Button>\n            </Form>\n            <div className=\"my-3\">\n\n\n                <Row className='py-3'>\n                    <Col>\n                        Have an account?\n          <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                            Login\n          </Link>\n                    </Col>\n                </Row>\n\n            </div>\n        </FormContainer>\n    )\n}\n\nexport default Register\n","/Users/maxim/Documents/ECMS/dms-f/src/components/admin/Loans.js",["212","213","214","215","216","217","218","219","220","221","222","223","224","225","226"],"/Users/maxim/Documents/ECMS/dms-f/src/components/reusable/Loader.js",[],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"227","replacedBy":"231"},{"ruleId":"229","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":60,"column":6,"nodeType":"235","endLine":60,"endColumn":24,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":115,"column":40,"nodeType":"239","messageId":"240","endLine":115,"endColumn":42},{"ruleId":"241","severity":1,"message":"242","line":8,"column":10,"nodeType":"243","messageId":"244","endLine":8,"endColumn":19},{"ruleId":"241","severity":1,"message":"245","line":103,"column":9,"nodeType":"243","messageId":"244","endLine":103,"endColumn":20},{"ruleId":"233","severity":1,"message":"246","line":140,"column":6,"nodeType":"235","endLine":140,"endColumn":21,"suggestions":"247"},{"ruleId":"233","severity":1,"message":"246","line":152,"column":6,"nodeType":"235","endLine":152,"endColumn":14,"suggestions":"248"},{"ruleId":"233","severity":1,"message":"246","line":164,"column":6,"nodeType":"235","endLine":164,"endColumn":16,"suggestions":"249"},{"ruleId":"237","severity":1,"message":"238","line":379,"column":51,"nodeType":"239","messageId":"240","endLine":379,"endColumn":53},{"ruleId":"227","replacedBy":"250"},{"ruleId":"229","replacedBy":"251"},{"ruleId":"233","severity":1,"message":"252","line":13,"column":9,"nodeType":"253","endLine":13,"endColumn":37},{"ruleId":"241","severity":1,"message":"254","line":23,"column":10,"nodeType":"243","messageId":"244","endLine":23,"endColumn":17},{"ruleId":"241","severity":1,"message":"255","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":13},{"ruleId":"233","severity":1,"message":"256","line":21,"column":9,"nodeType":"253","endLine":21,"endColumn":37},{"ruleId":"241","severity":1,"message":"257","line":31,"column":21,"nodeType":"243","messageId":"244","endLine":31,"endColumn":33},{"ruleId":"227","replacedBy":"258"},{"ruleId":"229","replacedBy":"259"},{"ruleId":"227","replacedBy":"260"},{"ruleId":"229","replacedBy":"261"},{"ruleId":"233","severity":1,"message":"262","line":16,"column":9,"nodeType":"253","endLine":16,"endColumn":37},{"ruleId":"227","replacedBy":"263"},{"ruleId":"229","replacedBy":"264"},{"ruleId":"233","severity":1,"message":"265","line":47,"column":6,"nodeType":"235","endLine":47,"endColumn":65,"suggestions":"266"},{"ruleId":"233","severity":1,"message":"267","line":48,"column":6,"nodeType":"235","endLine":48,"endColumn":24,"suggestions":"268"},{"ruleId":"241","severity":1,"message":"269","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"227","replacedBy":"270"},{"ruleId":"229","replacedBy":"271"},{"ruleId":"237","severity":1,"message":"238","line":112,"column":44,"nodeType":"239","messageId":"240","endLine":112,"endColumn":46},{"ruleId":"227","replacedBy":"272"},{"ruleId":"229","replacedBy":"273"},{"ruleId":"241","severity":1,"message":"274","line":18,"column":12,"nodeType":"243","messageId":"244","endLine":18,"endColumn":19},{"ruleId":"241","severity":1,"message":"275","line":18,"column":21,"nodeType":"243","messageId":"244","endLine":18,"endColumn":31},{"ruleId":"241","severity":1,"message":"276","line":1,"column":28,"nodeType":"243","messageId":"244","endLine":1,"endColumn":35},{"ruleId":"241","severity":1,"message":"277","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":16},{"ruleId":"241","severity":1,"message":"278","line":4,"column":8,"nodeType":"243","messageId":"244","endLine":4,"endColumn":15},{"ruleId":"241","severity":1,"message":"279","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"280","line":19,"column":18,"nodeType":"243","messageId":"244","endLine":19,"endColumn":25},{"ruleId":"241","severity":1,"message":"281","line":19,"column":27,"nodeType":"243","messageId":"244","endLine":19,"endColumn":32},{"ruleId":"241","severity":1,"message":"282","line":25,"column":43,"nodeType":"243","messageId":"244","endLine":25,"endColumn":63},{"ruleId":"241","severity":1,"message":"283","line":25,"column":72,"nodeType":"243","messageId":"244","endLine":25,"endColumn":90},{"ruleId":"241","severity":1,"message":"284","line":28,"column":58,"nodeType":"243","messageId":"244","endLine":28,"endColumn":93},{"ruleId":"241","severity":1,"message":"285","line":28,"column":102,"nodeType":"243","messageId":"244","endLine":28,"endColumn":135},{"ruleId":"241","severity":1,"message":"286","line":28,"column":146,"nodeType":"243","messageId":"244","endLine":28,"endColumn":180},{"ruleId":"287","severity":1,"message":"288","line":31,"column":18,"nodeType":"289","messageId":"290","endLine":31,"endColumn":20},{"ruleId":"287","severity":1,"message":"288","line":31,"column":51,"nodeType":"289","messageId":"290","endLine":31,"endColumn":53},{"ruleId":"233","severity":1,"message":"246","line":49,"column":6,"nodeType":"235","endLine":49,"endColumn":21,"suggestions":"291"},{"ruleId":"237","severity":1,"message":"238","line":116,"column":48,"nodeType":"239","messageId":"240","endLine":116,"endColumn":50},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],["292"],["293"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'orderId'. Either include them or remove the dependency array.","ArrayExpression",["294"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'ExportCSV' is defined but never used.","Identifier","unusedVar","'addDecimals' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["295"],["296"],["297"],["292"],["293"],"The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 50) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","VariableDeclarator","'message' is assigned a value but never used.","'axios' is defined but never used.","The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 59) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.","'setUploading' is assigned a value but never used.",["292"],["293"],["292"],["293"],"The 'dispatch' object construction makes the dependencies of useEffect Hook (at line 43) change on every render. To fix this, wrap the initialization of 'dispatch' in its own useMemo() Hook.",["292"],["293"],"React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array.",["298"],"React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["299"],"'useEffect' is defined but never used.",["292"],["293"],["292"],["293"],"'address' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'history' is defined but never used.","'Button' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'approvedLoansLoading' is assigned a value but never used.","'approvedLoansError' is assigned a value but never used.","'orderFilterByLoanStatusLoansLoading' is assigned a value but never used.","'orderFilterByLoanStatusLoansError' is assigned a value but never used.","'orderFilterByLoanStatusLoanSuccess' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["300"],"no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},"Update the dependencies array to be: [dispatch, orderId, successDelivered]",{"range":"315","text":"316"},"Update the dependencies array to be: [dispatch, paymentMethod]",{"range":"317","text":"318"},"Update the dependencies array to be: [dispatch, isPaid]",{"range":"319","text":"320"},"Update the dependencies array to be: [Province, dispatch]",{"range":"321","text":"322"},"Update the dependencies array to be: [dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]",{"range":"323","text":"324"},"Update the dependencies array to be: [history, order._id, success]",{"range":"325","text":"326"},"Update the dependencies array to be: [approvedLoans, dispatch]",{"range":"327","text":"328"},[1727,1745],"[dispatch, orderId, successDelivered]",[5016,5031],"[dispatch, paymentMethod]",[5277,5285],"[dispatch, isPaid]",[5516,5526],"[Province, dispatch]",[1449,1508],"[dispatch, userInfo, history, successDelete, successCreate, createdProduct._id]",[1360,1378],"[history, order._id, success]",[1707,1722],"[approvedLoans, dispatch]"]